picotron cartridge // www.picotron.net
version 2

:: gfx/
:: map/
:: sfx/
:: scenes/
:: libs/
:: gfx/0.gfx
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTA1LTA1IDE4OjQ2OjA5Iixtb2RpZmllZD0iMjAyNC0w
NS0wNyAwMjoyNDo1OCIscmV2aXNpb249MTE5NF1dbHo0AG0AAAAFMQAA8xR7WzBdPXtibXA9cHh1
AEMgEBAE8PAsZmxhZ3M9MCxwYW5feAgAz3k9MCx6b29tPTh9LDEA------------------------
----------------------------------------51BtPTh9fQ==
:: gfx/.info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTA1LTA1IDE4OjQ2OjA3Iixtb2RpZmllZD0iMjAyNC0w
NS0wNyAwMjoyNDo1OCJdXWx6NAAEAAAAAwAAADBuaWw=
:: libs/bump.lua
b64$LS1bW3BvZF9mb3JtYXQ9InJhdyIsY3JlYXRlZD0iMjAyNC0wNS0wNiAyMzozMzoxMCIsbW9k
aWZpZWQ9IjIwMjQtMDUtMDYgMjM6Mzk6MzYiLHJldmlzaW9uPTE1XV0KLS0tIFRoaXMgZnVuY3Rp
b24gaXMgYSB3cmFwcGVyIG9uIHRoZSBvZmZpY2lhbCBsaWJyYXJ5IHRoYXQganVzdCAiYnVpbGRz
IiB0aGUgYnVtcCBsaWJyYXJ5Ci0tLSBJdCdzIHRoZSBlYXNpZXN0IHdheSBJIGNvdWxkIHRoaW5r
IG9mIHRoYXQgZG9lc24ndCByZXF1aXJlIGNoYW5naW5nIGV2ZXJ5dGhpbmchCmZ1bmN0aW9uIF9f
bWFrZV9idW1wKCkKICAgIGxvY2FsIGJ1bXAgPSB7CiAgICAgICAgX1ZFUlNJT04gICAgID0gJ2J1
bXAgdjMuMS43JywKICAgICAgICBfVVJMICAgICAgICAgPSAnaHR0cHM6Ly9naXRodWIuY29tL2tp
a2l0by9idW1wLmx1YScsCiAgICAgICAgX0RFU0NSSVBUSU9OID0gJ0EgY29sbGlzaW9uIGRldGVj
dGlvbiBsaWJyYXJ5IGZvciBMdWEnLAogICAgICAgIF9MSUNFTlNFICAgICA9IFtbCiAgICAgICAg
TUlUIExJQ0VOU0UKCiAgICAgICAgQ29weXJpZ2h0IChjKSAyMDE0IEVucmlxdWUgR2FyY8OtYSBD
b3RhCgogICAgICAgIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdl
LCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhCiAgICAgICAgY29weSBvZiB0aGlzIHNvZnR3YXJl
IGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZQogICAgICAgICJTb2Z0d2Fy
ZSIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRp
bmcKICAgICAgICB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1v
ZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsCiAgICAgICAgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5k
L29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvCiAgICAgICAgcGVybWl0IHBl
cnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0
IHRvCiAgICAgICAgdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOgoKICAgICAgICBUaGUgYWJvdmUg
Y29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNs
dWRlZAogICAgICAgIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhl
IFNvZnR3YXJlLgoKICAgICAgICBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgIkFTIElTIiwgV0lU
SE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUwogICAgICAgIE9SIElNUExJRUQsIElO
Q0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YKICAgICAgICBNRVJD
SEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZS
SU5HRU1FTlQuCiAgICAgICAgSU4gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJ
R0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkKICAgICAgICBDTEFJTSwgREFNQUdFUyBPUiBP
VEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULAogICAgICAg
IFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9O
IFdJVEggVEhFCiAgICAgICAgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJ
TiBUSEUgU09GVFdBUkUuCiAgICAgIF1dCiAgICB9CiAgICAtLS0tLS0tLS0tLS0tLS0tLS0tLS0t
LS0tLS0tLS0tLS0tLS0tLS0tLS0KICAgIC0tIEF1eGlsaWFyeSBmdW5jdGlvbnMKICAgIC0tLS0t
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQogICAgbG9jYWwgREVMVEEgPSAx
ZS0xMCAtLSBmbG9hdGluZy1wb2ludCBtYXJnaW4gb2YgZXJyb3IKCiAgICBsb2NhbCBhYnMsIGZs
b29yLCBjZWlsLCBtaW4sIG1heCA9IG1hdGguYWJzLCBtYXRoLmZsb29yLCBtYXRoLmNlaWwsIG1h
dGgubWluLCBtYXRoLm1heAoKICAgIGxvY2FsIGZ1bmN0aW9uIHNpZ24oeCkKICAgICAgICBpZiB4
ID4gMCB0aGVuIHJldHVybiAxIGVuZAogICAgICAgIGlmIHggPT0gMCB0aGVuIHJldHVybiAwIGVu
ZAogICAgICAgIHJldHVybiAtMQogICAgZW5kCgogICAgbG9jYWwgZnVuY3Rpb24gbmVhcmVzdCh4
LCBhLCBiKQogICAgICAgIGlmIGFicyhhIC0geCkgPCBhYnMoYiAtIHgpIHRoZW4gcmV0dXJuIGEg
ZWxzZSByZXR1cm4gYiBlbmQKICAgIGVuZAoKICAgIGxvY2FsIGZ1bmN0aW9uIGFzc2VydFR5cGUo
ZGVzaXJlZFR5cGUsIHZhbHVlLCBuYW1lKQogICAgICAgIGlmIHR5cGUodmFsdWUpIH49IGRlc2ly
ZWRUeXBlIHRoZW4KICAgICAgICAgICAgYXNzZXJ0KGZhbHNlLAogICAgICAgICAgICAgICAgbmFt
ZSAuLiAnIG11c3QgYmUgYSAnIC4uIGRlc2lyZWRUeXBlIC4uICcsIGJ1dCB3YXMgJyAuLiB0b3N0
cmluZyh2YWx1ZSkgLi4gJyhhICcgLi4gdHlwZSh2YWx1ZSkgLi4gJyknKQogICAgICAgIGVuZAog
ICAgZW5kCgogICAgbG9jYWwgZnVuY3Rpb24gYXNzZXJ0SXNQb3NpdGl2ZU51bWJlcih2YWx1ZSwg
bmFtZSkKICAgICAgICBpZiB0eXBlKHZhbHVlKSB_PSAnbnVtYmVyJyBvciB2YWx1ZSA8PSAwIHRo
ZW4KICAgICAgICAgICAgYXNzZXJ0KGZhbHNlLCBuYW1lIC4uICcgbXVzdCBiZSBhIHBvc2l0aXZl
IGludGVnZXIsIGJ1dCB3YXMgJyAuLiB0b3N0cmluZyh2YWx1ZSkgLi4gJygnIC4uIHR5cGUodmFs
dWUpIC4uICcpJykKICAgICAgICBlbmQKICAgIGVuZAoKICAgIGxvY2FsIGZ1bmN0aW9uIGFzc2Vy
dElzUmVjdCh4LCB5LCB3LCBoKQogICAgICAgIGFzc2VydFR5cGUoJ251bWJlcicsIHgsICd4JykK
ICAgICAgICBhc3NlcnRUeXBlKCdudW1iZXInLCB5LCAneScpCiAgICAgICAgYXNzZXJ0SXNQb3Np
dGl2ZU51bWJlcih3LCAndycpCiAgICAgICAgYXNzZXJ0SXNQb3NpdGl2ZU51bWJlcihoLCAnaCcp
CiAgICBlbmQKCiAgICBsb2NhbCBkZWZhdWx0RmlsdGVyID0gZnVuY3Rpb24oKQogICAgICAgIHJl
dHVybiAnc2xpZGUnCiAgICBlbmQKCiAgICAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t
LS0tLS0tLS0tLS0KICAgIC0tIFJlY3RhbmdsZSBmdW5jdGlvbnMKICAgIC0tLS0tLS0tLS0tLS0t
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoKICAgIGxvY2FsIGZ1bmN0aW9uIHJlY3RfZ2V0
TmVhcmVzdENvcm5lcih4LCB5LCB3LCBoLCBweCwgcHkpCiAgICAgICAgcmV0dXJuIG5lYXJlc3Qo
cHgsIHgsIHggKyB3KSwgbmVhcmVzdChweSwgeSwgeSArIGgpCiAgICBlbmQKCiAgICAtLSBUaGlz
IGlzIGEgZ2VuZXJhbGl6ZWQgaW1wbGVtZW50YXRpb24gb2YgdGhlIGxpYW5nLWJhcnNreSBhbGdv
cml0aG0sIHdoaWNoIGFsc28gcmV0dXJucwogICAgLS0gdGhlIG5vcm1hbHMgb2YgdGhlIHNpZGVz
IHdoZXJlIHRoZSBzZWdtZW50IGludGVyc2VjdHMuCiAgICAtLSBSZXR1cm5zIG5pbCBpZiB0aGUg
c2VnbWVudCBuZXZlciB0b3VjaGVzIHRoZSByZWN0CiAgICAtLSBOb3RpY2UgdGhhdCBub3JtYWxz
IGFyZSBvbmx5IGd1YXJhbnRlZWQgdG8gYmUgYWNjdXJhdGUgd2hlbiBpbml0aWFsbHkgdGkxLCB0
aTIgPT0gLW1hdGguaHVnZSwgbWF0aC5odWdlCiAgICBsb2NhbCBmdW5jdGlvbiByZWN0X2dldFNl
Z21lbnRJbnRlcnNlY3Rpb25JbmRpY2VzKHgsIHksIHcsIGgsIHgxLCB5MSwgeDIsIHkyLCB0aTEs
IHRpMikKICAgICAgICB0aTEsIHRpMiA9IHRpMSBvciAwLCB0aTIgb3IgMQogICAgICAgIGxvY2Fs
IGR4LCBkeSA9IHgyIC0geDEsIHkyIC0geTEKICAgICAgICBsb2NhbCBueCwgbnkKICAgICAgICBs
b2NhbCBueDEsIG55MSwgbngyLCBueTIgPSAwLCAwLCAwLCAwCiAgICAgICAgbG9jYWwgcCwgcSwg
cgoKICAgICAgICBmb3Igc2lkZSA9IDEsIDQgZG8KICAgICAgICAgICAgaWYgc2lkZSA9PSAxIHRo
ZW4KICAgICAgICAgICAgICAgIG54LCBueSwgcCwgcSA9IC0xLCAwLCAtZHgsIHgxIC0geCAgIC0t
IGxlZnQKICAgICAgICAgICAgZWxzZWlmIHNpZGUgPT0gMiB0aGVuCiAgICAgICAgICAgICAgICBu
eCwgbnksIHAsIHEgPSAxLCAwLCBkeCwgeCArIHcgLSB4MSAtLSByaWdodAogICAgICAgICAgICBl
bHNlaWYgc2lkZSA9PSAzIHRoZW4KICAgICAgICAgICAgICAgIG54LCBueSwgcCwgcSA9IDAsIC0x
LCAtZHksIHkxIC0geSAgIC0tIHRvcAogICAgICAgICAgICBlbHNlCiAgICAgICAgICAgICAgICBu
eCwgbnksIHAsIHEgPSAwLCAxLCBkeSwgeSArIGggLSB5MSAtLSBib3R0b20KICAgICAgICAgICAg
ZW5kCgogICAgICAgICAgICBpZiBwID09IDAgdGhlbgogICAgICAgICAgICAgICAgaWYgcSA8PSAw
IHRoZW4gcmV0dXJuIG5pbCBlbmQKICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgciA9
IHEgLyBwCiAgICAgICAgICAgICAgICBpZiBwIDwgMCB0aGVuCiAgICAgICAgICAgICAgICAgICAg
aWYgciA_IHRpMiB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuaWwKICAgICAg
ICAgICAgICAgICAgICBlbHNlaWYgciA_IHRpMSB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAg
IHRpMSwgbngxLCBueTEgPSByLCBueCwgbnkKICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAg
ICAgICAgICAgIGVsc2UgLS0gcCA_IDAKICAgICAgICAgICAgICAgICAgICBpZiByIDwgdGkxIHRo
ZW4KICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5pbAogICAgICAgICAgICAgICAgICAg
IGVsc2VpZiByIDwgdGkyIHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgdGkyLCBueDIsIG55
MiA9IHIsIG54LCBueQogICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgZW5k
CiAgICAgICAgICAgIGVuZAogICAgICAgIGVuZAoKICAgICAgICByZXR1cm4gdGkxLCB0aTIsIG54
MSwgbnkxLCBueDIsIG55MgogICAgZW5kCgogICAgLS0gQ2FsY3VsYXRlcyB0aGUgbWlua293c2t5
IGRpZmZlcmVuY2UgYmV0d2VlbiAyIHJlY3RzLCB3aGljaCBpcyBhbm90aGVyIHJlY3QKICAgIGxv
Y2FsIGZ1bmN0aW9uIHJlY3RfZ2V0RGlmZih4MSwgeTEsIHcxLCBoMSwgeDIsIHkyLCB3MiwgaDIp
CiAgICAgICAgcmV0dXJuIHgyIC0geDEgLSB3MSwKICAgICAgICAgICAgeTIgLSB5MSAtIGgxLAog
ICAgICAgICAgICB3MSArIHcyLAogICAgICAgICAgICBoMSArIGgyCiAgICBlbmQKCiAgICBsb2Nh
bCBmdW5jdGlvbiByZWN0X2NvbnRhaW5zUG9pbnQoeCwgeSwgdywgaCwgcHgsIHB5KQogICAgICAg
IHJldHVybiBweCAtIHggPiBERUxUQSBhbmQgcHkgLSB5ID4gREVMVEEgYW5kCiAgICAgICAgICAg
IHggKyB3IC0gcHggPiBERUxUQSBhbmQgeSArIGggLSBweSA_IERFTFRBCiAgICBlbmQKCiAgICBs
b2NhbCBmdW5jdGlvbiByZWN0X2lzSW50ZXJzZWN0aW5nKHgxLCB5MSwgdzEsIGgxLCB4MiwgeTIs
IHcyLCBoMikKICAgICAgICByZXR1cm4geDEgPCB4MiArIHcyIGFuZCB4MiA8IHgxICsgdzEgYW5k
CiAgICAgICAgICAgIHkxIDwgeTIgKyBoMiBhbmQgeTIgPCB5MSArIGgxCiAgICBlbmQKCiAgICBs
b2NhbCBmdW5jdGlvbiByZWN0X2dldFNxdWFyZURpc3RhbmNlKHgxLCB5MSwgdzEsIGgxLCB4Miwg
eTIsIHcyLCBoMikKICAgICAgICBsb2NhbCBkeCA9IHgxIC0geDIgKyAodzEgLSB3MikgLyAyCiAg
ICAgICAgbG9jYWwgZHkgPSB5MSAtIHkyICsgKGgxIC0gaDIpIC8gMgogICAgICAgIHJldHVybiBk
eCAqIGR4ICsgZHkgKiBkeQogICAgZW5kCgogICAgbG9jYWwgZnVuY3Rpb24gcmVjdF9kZXRlY3RD
b2xsaXNpb24oeDEsIHkxLCB3MSwgaDEsIHgyLCB5MiwgdzIsIGgyLCBnb2FsWCwgZ29hbFkpCiAg
ICAgICAgZ29hbFggICAgICAgICAgICA9IGdvYWxYIG9yIHgxCiAgICAgICAgZ29hbFkgICAgICAg
ICAgICA9IGdvYWxZIG9yIHkxCgogICAgICAgIGxvY2FsIGR4LCBkeSAgICAgPSBnb2FsWCAtIHgx
LCBnb2FsWSAtIHkxCiAgICAgICAgbG9jYWwgeCwgeSwgdywgaCA9IHJlY3RfZ2V0RGlmZih4MSwg
eTEsIHcxLCBoMSwgeDIsIHkyLCB3MiwgaDIpCgogICAgICAgIGxvY2FsIG92ZXJsYXBzLCB0aSwg
bngsIG55CgogICAgICAgIGlmIHJlY3RfY29udGFpbnNQb2ludCh4LCB5LCB3LCBoLCAwLCAwKSB0
aGVuICAgICAgICAgIC0tIGl0ZW0gd2FzIGludGVyc2VjdGluZyBvdGhlcgogICAgICAgICAgICBs
b2NhbCBweCwgcHkgPSByZWN0X2dldE5lYXJlc3RDb3JuZXIoeCwgeSwgdywgaCwgMCwgMCkKICAg
ICAgICAgICAgbG9jYWwgd2ksIGhpID0gbWluKHcxLCBhYnMocHgpKSwgbWluKGgxLCBhYnMocHkp
KSAtLSBhcmVhIG9mIGludGVyc2VjdGlvbgogICAgICAgICAgICB0aSAgICAgICAgICAgPSAtd2kg
KiBoaSAgICAgICAgICAgICAgICAgICAgICAgICAgIC0tIHRpIGlzIHRoZSBuZWdhdGl2ZSBhcmVh
IG9mIGludGVyc2VjdGlvbgogICAgICAgICAgICBvdmVybGFwcyAgICAgPSB0cnVlCiAgICAgICAg
ZWxzZQogICAgICAgICAgICBsb2NhbCB0aTEsIHRpMiwgbngxLCBueTEgPSByZWN0X2dldFNlZ21l
bnRJbnRlcnNlY3Rpb25JbmRpY2VzKHgsIHksIHcsIGgsIDAsIDAsIGR4LCBkeSwgLW1hdGguaHVn
ZSwgbWF0aAogICAgICAgICAgICAgICAgLmh1Z2UpCgogICAgICAgICAgICAtLSBpdGVtIHR1bm5l
bHMgaW50byBvdGhlcgogICAgICAgICAgICBpZiB0aTEKICAgICAgICAgICAgICAgIGFuZCB0aTEg
PCAxCiAgICAgICAgICAgICAgICBhbmQgKGFicyh0aTEgLSB0aTIpID49IERFTFRBKSAtLSBzcGVj
aWFsIGNhc2UgZm9yIHJlY3QgZ29pbmcgdGhyb3VnaCBhbm90aGVyIHJlY3QncyBjb3JuZXIKICAg
ICAgICAgICAgICAgIGFuZCAoMCA8IHRpMSArIERFTFRBCiAgICAgICAgICAgICAgICAgICAgb3Ig
MCA9PSB0aTEgYW5kIHRpMiA_IDApCiAgICAgICAgICAgIHRoZW4KICAgICAgICAgICAgICAgIHRp
LCBueCwgbnkgPSB0aTEsIG54MSwgbnkxCiAgICAgICAgICAgICAgICBvdmVybGFwcyAgID0gZmFs
c2UKICAgICAgICAgICAgZW5kCiAgICAgICAgZW5kCgogICAgICAgIGlmIG5vdCB0aSB0aGVuIHJl
dHVybiBlbmQKCiAgICAgICAgbG9jYWwgdHgsIHR5CgogICAgICAgIGlmIG92ZXJsYXBzIHRoZW4K
ICAgICAgICAgICAgaWYgZHggPT0gMCBhbmQgZHkgPT0gMCB0aGVuCiAgICAgICAgICAgICAgICAt
LSBpbnRlcnNlY3RpbmcgYW5kIG5vdCBtb3ZpbmcgLSB1c2UgbWluaW11bSBkaXNwbGFjZW1lbnQg
dmVjdG9yCiAgICAgICAgICAgICAgICBsb2NhbCBweCwgcHkgPSByZWN0X2dldE5lYXJlc3RDb3Ju
ZXIoeCwgeSwgdywgaCwgMCwgMCkKICAgICAgICAgICAgICAgIGlmIGFicyhweCkgPCBhYnMocHkp
IHRoZW4gcHkgPSAwIGVsc2UgcHggPSAwIGVuZAogICAgICAgICAgICAgICAgbngsIG55ID0gc2ln
bihweCksIHNpZ24ocHkpCiAgICAgICAgICAgICAgICB0eCwgdHkgPSB4MSArIHB4LCB5MSArIHB5
CiAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgICAgIC0tIGludGVyc2VjdGluZyBhbmQgbW92
aW5nIC0gbW92ZSBpbiB0aGUgb3Bwb3NpdGUgZGlyZWN0aW9uCiAgICAgICAgICAgICAgICBsb2Nh
bCB0aTEsIF8KICAgICAgICAgICAgICAgIHRpMSwgXywgbngsIG55ID0gcmVjdF9nZXRTZWdtZW50
SW50ZXJzZWN0aW9uSW5kaWNlcyh4LCB5LCB3LCBoLCAwLCAwLCBkeCwgZHksIC1tYXRoLmh1Z2Us
IDEpCiAgICAgICAgICAgICAgICBpZiBub3QgdGkxIHRoZW4gcmV0dXJuIGVuZAogICAgICAgICAg
ICAgICAgdHgsIHR5ID0geDEgKyBkeCAqIHRpMSwgeTEgKyBkeSAqIHRpMQogICAgICAgICAgICBl
bmQKICAgICAgICBlbHNlIC0tIHR1bm5lbAogICAgICAgICAgICB0eCwgdHkgPSB4MSArIGR4ICog
dGksIHkxICsgZHkgKiB0aQogICAgICAgIGVuZAoKICAgICAgICByZXR1cm4gewogICAgICAgICAg
ICBvdmVybGFwcyAgPSBvdmVybGFwcywKICAgICAgICAgICAgdGkgICAgICAgID0gdGksCiAgICAg
ICAgICAgIG1vdmUgICAgICA9IHsgeCA9IGR4LCB5ID0gZHkgfSwKICAgICAgICAgICAgbm9ybWFs
ICAgID0geyB4ID0gbngsIHkgPSBueSB9LAogICAgICAgICAgICB0b3VjaCAgICAgPSB7IHggPSB0
eCwgeSA9IHR5IH0sCiAgICAgICAgICAgIGl0ZW1SZWN0ICA9IHsgeCA9IHgxLCB5ID0geTEsIHcg
PSB3MSwgaCA9IGgxIH0sCiAgICAgICAgICAgIG90aGVyUmVjdCA9IHsgeCA9IHgyLCB5ID0geTIs
IHcgPSB3MiwgaCA9IGgyIH0KICAgICAgICB9CiAgICBlbmQKCiAgICAtLS0tLS0tLS0tLS0tLS0t
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KICAgIC0tIEdyaWQgZnVuY3Rpb25zCiAgICAtLS0t
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCiAgICBsb2NhbCBmdW5jdGlv
biBncmlkX3RvV29ybGQoY2VsbFNpemUsIGN4LCBjeSkKICAgICAgICByZXR1cm4gKGN4IC0gMSkg
KiBjZWxsU2l6ZSwgKGN5IC0gMSkgKiBjZWxsU2l6ZQogICAgZW5kCgogICAgbG9jYWwgZnVuY3Rp
b24gZ3JpZF90b0NlbGwoY2VsbFNpemUsIHgsIHkpCiAgICAgICAgcmV0dXJuIGZsb29yKHggLyBj
ZWxsU2l6ZSkgKyAxLCBmbG9vcih5IC8gY2VsbFNpemUpICsgMQogICAgZW5kCgogICAgLS0gZ3Jp
ZF90cmF2ZXJzZSogZnVuY3Rpb25zIGFyZSBiYXNlZCBvbiAiQSBGYXN0IFZveGVsIFRyYXZlcnNh
bCBBbGdvcml0aG0gZm9yIFJheSBUcmFjaW5nIiwKICAgIC0tIGJ5IEpvaG4gQW1hbmlkZXMgYW5k
IEFuZHJldyBXb28gLSBodHRwOi8vd3d3LmNzZS55b3JrdS5jYS9_YW1hbmEvcmVzZWFyY2gvZ3Jp
ZC5wZGYKICAgIC0tIEl0IGhhcyBiZWVuIG1vZGlmaWVkIHRvIGluY2x1ZGUgYm90aCBjZWxscyB3
aGVuIHRoZSByYXkgInRvdWNoZXMgYSBncmlkIGNvcm5lciIsCiAgICAtLSBhbmQgd2l0aCBhIGRp
ZmZlcmVudCBleGl0IGNvbmRpdGlvbgoKICAgIGxvY2FsIGZ1bmN0aW9uIGdyaWRfdHJhdmVyc2Vf
aW5pdFN0ZXAoY2VsbFNpemUsIGN0LCB0MSwgdDIpCiAgICAgICAgbG9jYWwgdiA9IHQyIC0gdDEK
ICAgICAgICBpZiB2ID4gMCB0aGVuCiAgICAgICAgICAgIHJldHVybiAxLCBjZWxsU2l6ZSAvIHYs
ICgoY3QgKyB2KSAqIGNlbGxTaXplIC0gdDEpIC8gdgogICAgICAgIGVsc2VpZiB2IDwgMCB0aGVu
CiAgICAgICAgICAgIHJldHVybiAtMSwgLWNlbGxTaXplIC8gdiwgKChjdCArIHYgLSAxKSAqIGNl
bGxTaXplIC0gdDEpIC8gdgogICAgICAgIGVsc2UKICAgICAgICAgICAgcmV0dXJuIDAsIG1hdGgu
aHVnZSwgbWF0aC5odWdlCiAgICAgICAgZW5kCiAgICBlbmQKCiAgICBsb2NhbCBmdW5jdGlvbiBn
cmlkX3RyYXZlcnNlKGNlbGxTaXplLCB4MSwgeTEsIHgyLCB5MiwgZikKICAgICAgICBsb2NhbCBj
eDEsIGN5MSAgICAgID0gZ3JpZF90b0NlbGwoY2VsbFNpemUsIHgxLCB5MSkKICAgICAgICBsb2Nh
bCBjeDIsIGN5MiAgICAgID0gZ3JpZF90b0NlbGwoY2VsbFNpemUsIHgyLCB5MikKICAgICAgICBs
b2NhbCBzdGVwWCwgZHgsIHR4ID0gZ3JpZF90cmF2ZXJzZV9pbml0U3RlcChjZWxsU2l6ZSwgY3gx
LCB4MSwgeDIpCiAgICAgICAgbG9jYWwgc3RlcFksIGR5LCB0eSA9IGdyaWRfdHJhdmVyc2VfaW5p
dFN0ZXAoY2VsbFNpemUsIGN5MSwgeTEsIHkyKQogICAgICAgIGxvY2FsIGN4LCBjeSAgICAgICAg
PSBjeDEsIGN5MQoKICAgICAgICBmKGN4LCBjeSkKCiAgICAgICAgLS0gVGhlIGRlZmF1bHQgaW1w
bGVtZW50YXRpb24gaGFkIGFuIGluZmluaXRlIGxvb3AgcHJvYmxlbSB3aGVuCiAgICAgICAgLS0g
YXBwcm9hY2hpbmcgdGhlIGxhc3QgY2VsbCBpbiBzb21lIG9jY2Fzc2lvbnMuIFdlIGZpbmlzaCBp
dGVyYXRpbmcKICAgICAgICAtLSB3aGVuIHdlIGFyZSAqbmV4dCogdG8gdGhlIGxhc3QgY2VsbAog
ICAgICAgIHdoaWxlIGFicyhjeCAtIGN4MikgKyBhYnMoY3kgLSBjeTIpID4gMSBkbwogICAgICAg
ICAgICBpZiB0eCA8IHR5IHRoZW4KICAgICAgICAgICAgICAgIHR4LCBjeCA9IHR4ICsgZHgsIGN4
ICsgc3RlcFgKICAgICAgICAgICAgICAgIGYoY3gsIGN5KQogICAgICAgICAgICBlbHNlCiAgICAg
ICAgICAgICAgICAtLSBBZGRpdGlvbjogaW5jbHVkZSBib3RoIGNlbGxzIHdoZW4gZ29pbmcgdGhy
b3VnaCBjb3JuZXJzCiAgICAgICAgICAgICAgICBpZiB0eCA9PSB0eSB0aGVuIGYoY3ggKyBzdGVw
WCwgY3kpIGVuZAogICAgICAgICAgICAgICAgdHksIGN5ID0gdHkgKyBkeSwgY3kgKyBzdGVwWQog
ICAgICAgICAgICAgICAgZihjeCwgY3kpCiAgICAgICAgICAgIGVuZAogICAgICAgIGVuZAoKICAg
ICAgICAtLSBJZiB3ZSBoYXZlIG5vdCBhcnJpdmVkIHRvIHRoZSBsYXN0IGNlbGwsIHVzZSBpdAog
ICAgICAgIGlmIGN4IH49IGN4MiBvciBjeSB_PSBjeTIgdGhlbiBmKGN4MiwgY3kyKSBlbmQKICAg
IGVuZAoKICAgIGxvY2FsIGZ1bmN0aW9uIGdyaWRfdG9DZWxsUmVjdChjZWxsU2l6ZSwgeCwgeSwg
dywgaCkKICAgICAgICBsb2NhbCBjeCwgY3kgPSBncmlkX3RvQ2VsbChjZWxsU2l6ZSwgeCwgeSkK
ICAgICAgICBsb2NhbCBjciwgY2IgPSBjZWlsKCh4ICsgdykgLyBjZWxsU2l6ZSksIGNlaWwoKHkg
KyBoKSAvIGNlbGxTaXplKQogICAgICAgIHJldHVybiBjeCwgY3ksIGNyIC0gY3ggKyAxLCBjYiAt
IGN5ICsgMQogICAgZW5kCgogICAgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t
LS0tLS0tCiAgICAtLSBSZXNwb25zZXMKICAgIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t
LS0tLS0tLS0tLS0tLQoKICAgIGxvY2FsIHRvdWNoID0gZnVuY3Rpb24od29ybGQsIGNvbCwgeCwg
eSwgdywgaCwgZ29hbFgsIGdvYWxZLCBmaWx0ZXIpCiAgICAgICAgcmV0dXJuIGNvbC50b3VjaC54
LCBjb2wudG91Y2gueSwge30sIDAKICAgIGVuZAoKICAgIGxvY2FsIGNyb3NzID0gZnVuY3Rpb24o
d29ybGQsIGNvbCwgeCwgeSwgdywgaCwgZ29hbFgsIGdvYWxZLCBmaWx0ZXIpCiAgICAgICAgbG9j
YWwgY29scywgbGVuID0gd29ybGQ6cHJvamVjdChjb2wuaXRlbSwgeCwgeSwgdywgaCwgZ29hbFgs
IGdvYWxZLCBmaWx0ZXIpCiAgICAgICAgcmV0dXJuIGdvYWxYLCBnb2FsWSwgY29scywgbGVuCiAg
ICBlbmQKCiAgICBsb2NhbCBzbGlkZSA9IGZ1bmN0aW9uKHdvcmxkLCBjb2wsIHgsIHksIHcsIGgs
IGdvYWxYLCBnb2FsWSwgZmlsdGVyKQogICAgICAgIGdvYWxYICAgICAgICAgICA9IGdvYWxYIG9y
IHgKICAgICAgICBnb2FsWSAgICAgICAgICAgPSBnb2FsWSBvciB5CgogICAgICAgIGxvY2FsIHRj
aCwgbW92ZSA9IGNvbC50b3VjaCwgY29sLm1vdmUKICAgICAgICBpZiBtb3ZlLnggfj0gMCBvciBt
b3ZlLnkgfj0gMCB0aGVuCiAgICAgICAgICAgIGlmIGNvbC5ub3JtYWwueCB_PSAwIHRoZW4KICAg
ICAgICAgICAgICAgIGdvYWxYID0gdGNoLngKICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAg
ICAgZ29hbFkgPSB0Y2gueQogICAgICAgICAgICBlbmQKICAgICAgICBlbmQKCiAgICAgICAgY29s
LnNsaWRlICAgICAgID0geyB4ID0gZ29hbFgsIHkgPSBnb2FsWSB9CgogICAgICAgIHgsIHkgICAg
ICAgICAgICA9IHRjaC54LCB0Y2gueQogICAgICAgIGxvY2FsIGNvbHMsIGxlbiA9IHdvcmxkOnBy
b2plY3QoY29sLml0ZW0sIHgsIHksIHcsIGgsIGdvYWxYLCBnb2FsWSwgZmlsdGVyKQogICAgICAg
IHJldHVybiBnb2FsWCwgZ29hbFksIGNvbHMsIGxlbgogICAgZW5kCgogICAgbG9jYWwgYm91bmNl
ID0gZnVuY3Rpb24od29ybGQsIGNvbCwgeCwgeSwgdywgaCwgZ29hbFgsIGdvYWxZLCBmaWx0ZXIp
CiAgICAgICAgZ29hbFggPSBnb2FsWCBvciB4CiAgICAgICAgZ29hbFkgPSBnb2FsWSBvciB5Cgog
ICAgICAgIGxvY2FsIHRjaCwgbW92ZSA9IGNvbC50b3VjaCwgY29sLm1vdmUKICAgICAgICBsb2Nh
bCB0eCwgdHkgPSB0Y2gueCwgdGNoLnkKCiAgICAgICAgbG9jYWwgYngsIGJ5ID0gdHgsIHR5Cgog
ICAgICAgIGlmIG1vdmUueCB_PSAwIG9yIG1vdmUueSB_PSAwIHRoZW4KICAgICAgICAgICAgbG9j
YWwgYm54LCBibnkgPSBnb2FsWCAtIHR4LCBnb2FsWSAtIHR5CiAgICAgICAgICAgIGlmIGNvbC5u
b3JtYWwueCA9PSAwIHRoZW4gYm55ID0gLWJueSBlbHNlIGJueCA9IC1ibnggZW5kCiAgICAgICAg
ICAgIGJ4LCBieSA9IHR4ICsgYm54LCB0eSArIGJueQogICAgICAgIGVuZAoKICAgICAgICBjb2wu
Ym91bmNlICAgICAgPSB7IHggPSBieCwgeSA9IGJ5IH0KICAgICAgICB4LCB5ICAgICAgICAgICAg
PSB0Y2gueCwgdGNoLnkKICAgICAgICBnb2FsWCwgZ29hbFkgICAgPSBieCwgYnkKCiAgICAgICAg
bG9jYWwgY29scywgbGVuID0gd29ybGQ6cHJvamVjdChjb2wuaXRlbSwgeCwgeSwgdywgaCwgZ29h
bFgsIGdvYWxZLCBmaWx0ZXIpCiAgICAgICAgcmV0dXJuIGdvYWxYLCBnb2FsWSwgY29scywgbGVu
CiAgICBlbmQKCiAgICAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0K
ICAgIC0tIFdvcmxkCiAgICAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t
LS0KCiAgICBsb2NhbCBXb3JsZCA9IHt9CiAgICBsb2NhbCBXb3JsZF9tdCA9IHsgX19pbmRleCA9
IFdvcmxkIH0KCiAgICAtLSBQcml2YXRlIGZ1bmN0aW9ucyBhbmQgbWV0aG9kcwoKICAgIGxvY2Fs
IGZ1bmN0aW9uIHNvcnRCeVdlaWdodChhLCBiKSByZXR1cm4gYS53ZWlnaHQgPCBiLndlaWdodCBl
bmQKCiAgICBsb2NhbCBmdW5jdGlvbiBzb3J0QnlUaUFuZERpc3RhbmNlKGEsIGIpCiAgICAgICAg
aWYgYS50aSA9PSBiLnRpIHRoZW4KICAgICAgICAgICAgbG9jYWwgaXIsIGFyLCBiciA9IGEuaXRl
bVJlY3QsIGEub3RoZXJSZWN0LCBiLm90aGVyUmVjdAogICAgICAgICAgICBsb2NhbCBhZCA9IHJl
Y3RfZ2V0U3F1YXJlRGlzdGFuY2UoaXIueCwgaXIueSwgaXIudywgaXIuaCwgYXIueCwgYXIueSwg
YXIudywgYXIuaCkKICAgICAgICAgICAgbG9jYWwgYmQgPSByZWN0X2dldFNxdWFyZURpc3RhbmNl
KGlyLngsIGlyLnksIGlyLncsIGlyLmgsIGJyLngsIGJyLnksIGJyLncsIGJyLmgpCiAgICAgICAg
ICAgIHJldHVybiBhZCA8IGJkCiAgICAgICAgZW5kCiAgICAgICAgcmV0dXJuIGEudGkgPCBiLnRp
CiAgICBlbmQKCiAgICBsb2NhbCBmdW5jdGlvbiBhZGRJdGVtVG9DZWxsKHNlbGYsIGl0ZW0sIGN4
LCBjeSkKICAgICAgICBzZWxmLnJvd3NbY3ldID0gc2VsZi5yb3dzW2N5XSBvciBzZXRtZXRhdGFi
bGUoe30sIHsgX19tb2RlID0gJ3YnIH0pCiAgICAgICAgbG9jYWwgcm93ID0gc2VsZi5yb3dzW2N5
XQogICAgICAgIHJvd1tjeF0gPSByb3dbY3hdIG9yIHsgaXRlbUNvdW50ID0gMCwgeCA9IGN4LCB5
ID0gY3ksIGl0ZW1zID0gc2V0bWV0YXRhYmxlKHt9LCB7IF9fbW9kZSA9ICdrJyB9KSB9CiAgICAg
ICAgbG9jYWwgY2VsbCA9IHJvd1tjeF0KICAgICAgICBzZWxmLm5vbkVtcHR5Q2VsbHNbY2VsbF0g
PSB0cnVlCiAgICAgICAgaWYgbm90IGNlbGwuaXRlbXNbaXRlbV0gdGhlbgogICAgICAgICAgICBj
ZWxsLml0ZW1zW2l0ZW1dID0gdHJ1ZQogICAgICAgICAgICBjZWxsLml0ZW1Db3VudCA9IGNlbGwu
aXRlbUNvdW50ICsgMQogICAgICAgIGVuZAogICAgZW5kCgogICAgbG9jYWwgZnVuY3Rpb24gcmVt
b3ZlSXRlbUZyb21DZWxsKHNlbGYsIGl0ZW0sIGN4LCBjeSkKICAgICAgICBsb2NhbCByb3cgPSBz
ZWxmLnJvd3NbY3ldCiAgICAgICAgaWYgbm90IHJvdyBvciBub3Qgcm93W2N4XSBvciBub3Qgcm93
W2N4XS5pdGVtc1tpdGVtXSB0aGVuIHJldHVybiBmYWxzZSBlbmQKCiAgICAgICAgbG9jYWwgY2Vs
bCA9IHJvd1tjeF0KICAgICAgICBjZWxsLml0ZW1zW2l0ZW1dID0gbmlsCiAgICAgICAgY2VsbC5p
dGVtQ291bnQgPSBjZWxsLml0ZW1Db3VudCAtIDEKICAgICAgICBpZiBjZWxsLml0ZW1Db3VudCA9
PSAwIHRoZW4KICAgICAgICAgICAgc2VsZi5ub25FbXB0eUNlbGxzW2NlbGxdID0gbmlsCiAgICAg
ICAgZW5kCiAgICAgICAgcmV0dXJuIHRydWUKICAgIGVuZAoKICAgIGxvY2FsIGZ1bmN0aW9uIGdl
dERpY3RJdGVtc0luQ2VsbFJlY3Qoc2VsZiwgY2wsIGN0LCBjdywgY2gpCiAgICAgICAgbG9jYWwg
aXRlbXNfZGljdCA9IHt9CiAgICAgICAgZm9yIGN5ID0gY3QsIGN0ICsgY2ggLSAxIGRvCiAgICAg
ICAgICAgIGxvY2FsIHJvdyA9IHNlbGYucm93c1tjeV0KICAgICAgICAgICAgaWYgcm93IHRoZW4K
ICAgICAgICAgICAgICAgIGZvciBjeCA9IGNsLCBjbCArIGN3IC0gMSBkbwogICAgICAgICAgICAg
ICAgICAgIGxvY2FsIGNlbGwgPSByb3dbY3hdCiAgICAgICAgICAgICAgICAgICAgaWYgY2VsbCBh
bmQgY2VsbC5pdGVtQ291bnQgPiAwIHRoZW4gLS0gbm8gY2VsbC5pdGVtQ291bnQgPiAxIGJlY2F1
c2UgdHVubmVsaW5nCiAgICAgICAgICAgICAgICAgICAgICAgIGZvciBpdGVtLCBfIGluIHBhaXJz
KGNlbGwuaXRlbXMpIGRvCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtc19kaWN0W2l0
ZW1dID0gdHJ1ZQogICAgICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgICAg
ICBlbmQKICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICBlbmQKICAgICAgICBlbmQKCiAg
ICAgICAgcmV0dXJuIGl0ZW1zX2RpY3QKICAgIGVuZAoKICAgIGxvY2FsIGZ1bmN0aW9uIGdldENl
bGxzVG91Y2hlZEJ5U2VnbWVudChzZWxmLCB4MSwgeTEsIHgyLCB5MikKICAgICAgICBsb2NhbCBj
ZWxscywgY2VsbHNMZW4sIHZpc2l0ZWQgPSB7fSwgMCwge30KCiAgICAgICAgZ3JpZF90cmF2ZXJz
ZShzZWxmLmNlbGxTaXplLCB4MSwgeTEsIHgyLCB5MiwgZnVuY3Rpb24oY3gsIGN5KQogICAgICAg
ICAgICBsb2NhbCByb3cgPSBzZWxmLnJvd3NbY3ldCiAgICAgICAgICAgIGlmIG5vdCByb3cgdGhl
biByZXR1cm4gZW5kCiAgICAgICAgICAgIGxvY2FsIGNlbGwgPSByb3dbY3hdCiAgICAgICAgICAg
IGlmIG5vdCBjZWxsIG9yIHZpc2l0ZWRbY2VsbF0gdGhlbiByZXR1cm4gZW5kCgogICAgICAgICAg
ICB2aXNpdGVkW2NlbGxdID0gdHJ1ZQogICAgICAgICAgICBjZWxsc0xlbiA9IGNlbGxzTGVuICsg
MQogICAgICAgICAgICBjZWxsc1tjZWxsc0xlbl0gPSBjZWxsCiAgICAgICAgZW5kKQoKICAgICAg
ICByZXR1cm4gY2VsbHMsIGNlbGxzTGVuCiAgICBlbmQKCiAgICBsb2NhbCBmdW5jdGlvbiBnZXRJ
bmZvQWJvdXRJdGVtc1RvdWNoZWRCeVNlZ21lbnQoc2VsZiwgeDEsIHkxLCB4MiwgeTIsIGZpbHRl
cikKICAgICAgICBsb2NhbCBjZWxscywgbGVuID0gZ2V0Q2VsbHNUb3VjaGVkQnlTZWdtZW50KHNl
bGYsIHgxLCB5MSwgeDIsIHkyKQogICAgICAgIGxvY2FsIGNlbGwsIHJlY3QsIGwsIHQsIHcsIGgs
IHRpMSwgdGkyLCB0aWkwLCB0aWkxCiAgICAgICAgbG9jYWwgdmlzaXRlZCwgaXRlbUluZm8sIGl0
ZW1JbmZvTGVuID0ge30sIHt9LCAwCiAgICAgICAgZm9yIGkgPSAxLCBsZW4gZG8KICAgICAgICAg
ICAgY2VsbCA9IGNlbGxzW2ldCiAgICAgICAgICAgIGZvciBpdGVtIGluIHBhaXJzKGNlbGwuaXRl
bXMpIGRvCiAgICAgICAgICAgICAgICBpZiBub3QgdmlzaXRlZFtpdGVtXSB0aGVuCiAgICAgICAg
ICAgICAgICAgICAgdmlzaXRlZFtpdGVtXSA9IHRydWUKICAgICAgICAgICAgICAgICAgICBpZiAo
bm90IGZpbHRlciBvciBmaWx0ZXIoaXRlbSkpIHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAg
cmVjdCAgICAgICA9IHNlbGYucmVjdHNbaXRlbV0KICAgICAgICAgICAgICAgICAgICAgICAgbCwg
dCwgdywgaCA9IHJlY3QueCwgcmVjdC55LCByZWN0LncsIHJlY3QuaAoKICAgICAgICAgICAgICAg
ICAgICAgICAgdGkxLCB0aTIgICA9IHJlY3RfZ2V0U2VnbWVudEludGVyc2VjdGlvbkluZGljZXMo
bCwgdCwgdywgaCwgeDEsIHkxLCB4MiwgeTIsIDAsIDEpCiAgICAgICAgICAgICAgICAgICAgICAg
IGlmIHRpMSBhbmQgKCgwIDwgdGkxIGFuZCB0aTEgPCAxKSBvciAoMCA8IHRpMiBhbmQgdGkyIDwg
MSkpIHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0tIHRoZSBzb3J0aW5nIGlzIGFj
Y29yZGluZyB0byB0aGUgdCBvZiBhbiBpbmZpbml0ZSBsaW5lLCBub3QgdGhlIHNlZ21lbnQKICAg
ICAgICAgICAgICAgICAgICAgICAgICAgIHRpaTAsIHRpaTEgICAgICAgICAgICA9IHJlY3RfZ2V0
U2VnbWVudEludGVyc2VjdGlvbkluZGljZXMobCwgdCwgdywgaCwgeDEsIHkxLCB4MiwgeTIsCiAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLW1hdGguaHVnZSwgbWF0aC5odWdlKQogICAg
ICAgICAgICAgICAgICAgICAgICAgICAgaXRlbUluZm9MZW4gICAgICAgICAgID0gaXRlbUluZm9M
ZW4gKyAxCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtSW5mb1tpdGVtSW5mb0xlbl0g
PSB7IGl0ZW0gPSBpdGVtLCB0aTEgPSB0aTEsIHRpMiA9IHRpMiwgd2VpZ2h0ID0gbWluKHRpaTAs
IHRpaTEpIH0KICAgICAgICAgICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICAgICAg
ZW5kCiAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgZW5kCiAgICAgICAgZW5kCiAgICAg
ICAgdGFibGUuc29ydChpdGVtSW5mbywgc29ydEJ5V2VpZ2h0KQogICAgICAgIHJldHVybiBpdGVt
SW5mbywgaXRlbUluZm9MZW4KICAgIGVuZAoKICAgIGxvY2FsIGZ1bmN0aW9uIGdldFJlc3BvbnNl
QnlOYW1lKHNlbGYsIG5hbWUpCiAgICAgICAgbG9jYWwgcmVzcG9uc2UgPSBzZWxmLnJlc3BvbnNl
c1tuYW1lXQogICAgICAgIGlmIG5vdCByZXNwb25zZSB0aGVuCiAgICAgICAgICAgIGFzc2VydChm
YWxzZSwgKCdVbmtub3duIGNvbGxpc2lvbiB0eXBlOiAlcyAoJXMpJyk6Zm9ybWF0KG5hbWUsIHR5
cGUobmFtZSkpKQogICAgICAgIGVuZAogICAgICAgIHJldHVybiByZXNwb25zZQogICAgZW5kCgoK
ICAgIC0tIE1pc2MgUHVibGljIE1ldGhvZHMKCiAgICBmdW5jdGlvbiBXb3JsZDphZGRSZXNwb25z
ZShuYW1lLCByZXNwb25zZSkKICAgICAgICBzZWxmLnJlc3BvbnNlc1tuYW1lXSA9IHJlc3BvbnNl
CiAgICBlbmQKCiAgICBmdW5jdGlvbiBXb3JsZDpwcm9qZWN0KGl0ZW0sIHgsIHksIHcsIGgsIGdv
YWxYLCBnb2FsWSwgZmlsdGVyKQogICAgICAgIGFzc2VydElzUmVjdCh4LCB5LCB3LCBoKQoKICAg
ICAgICBnb2FsWCAgICAgICAgICAgICAgICAgPSBnb2FsWCBvciB4CiAgICAgICAgZ29hbFkgICAg
ICAgICAgICAgICAgID0gZ29hbFkgb3IgeQogICAgICAgIGZpbHRlciAgICAgICAgICAgICAgICA9
IGZpbHRlciBvciBkZWZhdWx0RmlsdGVyCgogICAgICAgIGxvY2FsIGNvbGxpc2lvbnMsIGxlbiA9
IHt9LCAwCgogICAgICAgIGxvY2FsIHZpc2l0ZWQgICAgICAgICA9IHt9CiAgICAgICAgaWYgaXRl
bSB_PSBuaWwgdGhlbiB2aXNpdGVkW2l0ZW1dID0gdHJ1ZSBlbmQKCiAgICAgICAgLS0gVGhpcyBj
b3VsZCBwcm9iYWJseSBiZSBkb25lIHdpdGggbGVzcyBjZWxscyB1c2luZyBhIHBvbHlnb24gcmFz
dGVyIG92ZXIgdGhlIGNlbGxzIGluc3RlYWQgb2YgYQogICAgICAgIC0tIGJvdW5kaW5nIHJlY3Qg
b2YgdGhlIHdob2xlIG1vdmVtZW50LiBDb25kaXRpb25hbCB0byBidWlsZGluZyBhIHF1ZXJ5UG9s
eWdvbiBtZXRob2QKICAgICAgICBsb2NhbCB0bCwgdHQgPSBtaW4oZ29hbFgsIHgpLCBtaW4oZ29h
bFksIHkpCiAgICAgICAgbG9jYWwgdHIsIHRiID0gbWF4KGdvYWxYICsgdywgeCArIHcpLCBtYXgo
Z29hbFkgKyBoLCB5ICsgaCkKICAgICAgICBsb2NhbCB0dywgdGggPSB0ciAtIHRsLCB0YiAtIHR0
CgogICAgICAgIGxvY2FsIGNsLCBjdCwgY3csIGNoID0gZ3JpZF90b0NlbGxSZWN0KHNlbGYuY2Vs
bFNpemUsIHRsLCB0dCwgdHcsIHRoKQoKICAgICAgICBsb2NhbCBkaWN0SXRlbXNJbkNlbGxSZWN0
ID0gZ2V0RGljdEl0ZW1zSW5DZWxsUmVjdChzZWxmLCBjbCwgY3QsIGN3LCBjaCkKCiAgICAgICAg
Zm9yIG90aGVyLCBfIGluIHBhaXJzKGRpY3RJdGVtc0luQ2VsbFJlY3QpIGRvCiAgICAgICAgICAg
IGlmIG5vdCB2aXNpdGVkW290aGVyXSB0aGVuCiAgICAgICAgICAgICAgICB2aXNpdGVkW290aGVy
XSA9IHRydWUKCiAgICAgICAgICAgICAgICBsb2NhbCByZXNwb25zZU5hbWUgPSBmaWx0ZXIoaXRl
bSwgb3RoZXIpCiAgICAgICAgICAgICAgICBpZiByZXNwb25zZU5hbWUgdGhlbgogICAgICAgICAg
ICAgICAgICAgIGxvY2FsIG94LCBveSwgb3csIG9oID0gc2VsZjpnZXRSZWN0KG90aGVyKQogICAg
ICAgICAgICAgICAgICAgIGxvY2FsIGNvbCAgICAgICAgICAgID0gcmVjdF9kZXRlY3RDb2xsaXNp
b24oeCwgeSwgdywgaCwgb3gsIG95LCBvdywgb2gsIGdvYWxYLCBnb2FsWSkKCiAgICAgICAgICAg
ICAgICAgICAgaWYgY29sIHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgY29sLm90aGVyICAg
ICAgID0gb3RoZXIKICAgICAgICAgICAgICAgICAgICAgICAgY29sLml0ZW0gICAgICAgID0gaXRl
bQogICAgICAgICAgICAgICAgICAgICAgICBjb2wudHlwZSAgICAgICAgPSByZXNwb25zZU5hbWUK
CiAgICAgICAgICAgICAgICAgICAgICAgIGxlbiAgICAgICAgICAgICA9IGxlbiArIDEKICAgICAg
ICAgICAgICAgICAgICAgICAgY29sbGlzaW9uc1tsZW5dID0gY29sCiAgICAgICAgICAgICAgICAg
ICAgZW5kCiAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgZW5kCiAgICAgICAgZW5kCgog
ICAgICAgIHRhYmxlLnNvcnQoY29sbGlzaW9ucywgc29ydEJ5VGlBbmREaXN0YW5jZSkKCiAgICAg
ICAgcmV0dXJuIGNvbGxpc2lvbnMsIGxlbgogICAgZW5kCgogICAgZnVuY3Rpb24gV29ybGQ6Y291
bnRDZWxscygpCiAgICAgICAgbG9jYWwgY291bnQgPSAwCiAgICAgICAgZm9yIF8sIHJvdyBpbiBw
YWlycyhzZWxmLnJvd3MpIGRvCiAgICAgICAgICAgIGZvciBfLCBfIGluIHBhaXJzKHJvdykgZG8K
ICAgICAgICAgICAgICAgIGNvdW50ID0gY291bnQgKyAxCiAgICAgICAgICAgIGVuZAogICAgICAg
IGVuZAogICAgICAgIHJldHVybiBjb3VudAogICAgZW5kCgogICAgZnVuY3Rpb24gV29ybGQ6aGFz
SXRlbShpdGVtKQogICAgICAgIHJldHVybiBub3Qgbm90IHNlbGYucmVjdHNbaXRlbV0KICAgIGVu
ZAoKICAgIGZ1bmN0aW9uIFdvcmxkOmdldEl0ZW1zKCkKICAgICAgICBsb2NhbCBpdGVtcywgbGVu
ID0ge30sIDAKICAgICAgICBmb3IgaXRlbSwgXyBpbiBwYWlycyhzZWxmLnJlY3RzKSBkbwogICAg
ICAgICAgICBsZW4gPSBsZW4gKyAxCiAgICAgICAgICAgIGl0ZW1zW2xlbl0gPSBpdGVtCiAgICAg
ICAgZW5kCiAgICAgICAgcmV0dXJuIGl0ZW1zLCBsZW4KICAgIGVuZAoKICAgIGZ1bmN0aW9uIFdv
cmxkOmNvdW50SXRlbXMoKQogICAgICAgIGxvY2FsIGxlbiA9IDAKICAgICAgICBmb3IgXyBpbiBw
YWlycyhzZWxmLnJlY3RzKSBkbyBsZW4gPSBsZW4gKyAxIGVuZAogICAgICAgIHJldHVybiBsZW4K
ICAgIGVuZAoKICAgIGZ1bmN0aW9uIFdvcmxkOmdldFJlY3QoaXRlbSkKICAgICAgICBsb2NhbCBy
ZWN0ID0gc2VsZi5yZWN0c1tpdGVtXQogICAgICAgIGlmIG5vdCByZWN0IHRoZW4KICAgICAgICAg
ICAgYXNzZXJ0KGZhbHNlLAogICAgICAgICAgICAgICAgJ0l0ZW0gJyAuLgogICAgICAgICAgICAg
ICAgdG9zdHJpbmcoaXRlbSkgLi4KICAgICAgICAgICAgICAgICcgbXVzdCBiZSBhZGRlZCB0byB0
aGUgd29ybGQgYmVmb3JlIGdldHRpbmcgaXRzIHJlY3QuIFVzZSB3b3JsZDphZGQoaXRlbSwgeCx5
LHcsaCkgdG8gYWRkIGl0IGZpcnN0LicpCiAgICAgICAgZW5kCiAgICAgICAgcmV0dXJuIHJlY3Qu
eCwgcmVjdC55LCByZWN0LncsIHJlY3QuaAogICAgZW5kCgogICAgZnVuY3Rpb24gV29ybGQ6dG9X
b3JsZChjeCwgY3kpCiAgICAgICAgcmV0dXJuIGdyaWRfdG9Xb3JsZChzZWxmLmNlbGxTaXplLCBj
eCwgY3kpCiAgICBlbmQKCiAgICBmdW5jdGlvbiBXb3JsZDp0b0NlbGwoeCwgeSkKICAgICAgICBy
ZXR1cm4gZ3JpZF90b0NlbGwoc2VsZi5jZWxsU2l6ZSwgeCwgeSkKICAgIGVuZAoKICAgIC0tLSBR
dWVyeSBtZXRob2RzCgogICAgZnVuY3Rpb24gV29ybGQ6cXVlcnlSZWN0KHgsIHksIHcsIGgsIGZp
bHRlcikKICAgICAgICBhc3NlcnRJc1JlY3QoeCwgeSwgdywgaCkKCiAgICAgICAgbG9jYWwgY2ws
IGN0LCBjdywgY2ggPSBncmlkX3RvQ2VsbFJlY3Qoc2VsZi5jZWxsU2l6ZSwgeCwgeSwgdywgaCkK
ICAgICAgICBsb2NhbCBkaWN0SXRlbXNJbkNlbGxSZWN0ID0gZ2V0RGljdEl0ZW1zSW5DZWxsUmVj
dChzZWxmLCBjbCwgY3QsIGN3LCBjaCkKCiAgICAgICAgbG9jYWwgaXRlbXMsIGxlbiA9IHt9LCAw
CgogICAgICAgIGxvY2FsIHJlY3QKICAgICAgICBmb3IgaXRlbSwgXyBpbiBwYWlycyhkaWN0SXRl
bXNJbkNlbGxSZWN0KSBkbwogICAgICAgICAgICByZWN0ID0gc2VsZi5yZWN0c1tpdGVtXQogICAg
ICAgICAgICBpZiAobm90IGZpbHRlciBvciBmaWx0ZXIoaXRlbSkpCiAgICAgICAgICAgICAgICBh
bmQgcmVjdF9pc0ludGVyc2VjdGluZyh4LCB5LCB3LCBoLCByZWN0LngsIHJlY3QueSwgcmVjdC53
LCByZWN0LmgpCiAgICAgICAgICAgIHRoZW4KICAgICAgICAgICAgICAgIGxlbiA9IGxlbiArIDEK
ICAgICAgICAgICAgICAgIGl0ZW1zW2xlbl0gPSBpdGVtCiAgICAgICAgICAgIGVuZAogICAgICAg
IGVuZAoKICAgICAgICByZXR1cm4gaXRlbXMsIGxlbgogICAgZW5kCgogICAgZnVuY3Rpb24gV29y
bGQ6cXVlcnlQb2ludCh4LCB5LCBmaWx0ZXIpCiAgICAgICAgbG9jYWwgY3gsIGN5ID0gc2VsZjp0
b0NlbGwoeCwgeSkKICAgICAgICBsb2NhbCBkaWN0SXRlbXNJbkNlbGxSZWN0ID0gZ2V0RGljdEl0
ZW1zSW5DZWxsUmVjdChzZWxmLCBjeCwgY3ksIDEsIDEpCgogICAgICAgIGxvY2FsIGl0ZW1zLCBs
ZW4gPSB7fSwgMAoKICAgICAgICBsb2NhbCByZWN0CiAgICAgICAgZm9yIGl0ZW0sIF8gaW4gcGFp
cnMoZGljdEl0ZW1zSW5DZWxsUmVjdCkgZG8KICAgICAgICAgICAgcmVjdCA9IHNlbGYucmVjdHNb
aXRlbV0KICAgICAgICAgICAgaWYgKG5vdCBmaWx0ZXIgb3IgZmlsdGVyKGl0ZW0pKQogICAgICAg
ICAgICAgICAgYW5kIHJlY3RfY29udGFpbnNQb2ludChyZWN0LngsIHJlY3QueSwgcmVjdC53LCBy
ZWN0LmgsIHgsIHkpCiAgICAgICAgICAgIHRoZW4KICAgICAgICAgICAgICAgIGxlbiA9IGxlbiAr
IDEKICAgICAgICAgICAgICAgIGl0ZW1zW2xlbl0gPSBpdGVtCiAgICAgICAgICAgIGVuZAogICAg
ICAgIGVuZAoKICAgICAgICByZXR1cm4gaXRlbXMsIGxlbgogICAgZW5kCgogICAgZnVuY3Rpb24g
V29ybGQ6cXVlcnlTZWdtZW50KHgxLCB5MSwgeDIsIHkyLCBmaWx0ZXIpCiAgICAgICAgbG9jYWwg
aXRlbUluZm8sIGxlbiA9IGdldEluZm9BYm91dEl0ZW1zVG91Y2hlZEJ5U2VnbWVudChzZWxmLCB4
MSwgeTEsIHgyLCB5MiwgZmlsdGVyKQogICAgICAgIGxvY2FsIGl0ZW1zID0ge30KICAgICAgICBm
b3IgaSA9IDEsIGxlbiBkbwogICAgICAgICAgICBpdGVtc1tpXSA9IGl0ZW1JbmZvW2ldLml0ZW0K
ICAgICAgICBlbmQKICAgICAgICByZXR1cm4gaXRlbXMsIGxlbgogICAgZW5kCgogICAgZnVuY3Rp
b24gV29ybGQ6cXVlcnlTZWdtZW50V2l0aENvb3Jkcyh4MSwgeTEsIHgyLCB5MiwgZmlsdGVyKQog
ICAgICAgIGxvY2FsIGl0ZW1JbmZvLCBsZW4gPSBnZXRJbmZvQWJvdXRJdGVtc1RvdWNoZWRCeVNl
Z21lbnQoc2VsZiwgeDEsIHkxLCB4MiwgeTIsIGZpbHRlcikKICAgICAgICBsb2NhbCBkeCwgZHkg
ICAgICAgID0geDIgLSB4MSwgeTIgLSB5MQogICAgICAgIGxvY2FsIGluZm8sIHRpMSwgdGkyCiAg
ICAgICAgZm9yIGkgPSAxLCBsZW4gZG8KICAgICAgICAgICAgaW5mbyAgICAgICAgPSBpdGVtSW5m
b1tpXQogICAgICAgICAgICB0aTEgICAgICAgICA9IGluZm8udGkxCiAgICAgICAgICAgIHRpMiAg
ICAgICAgID0gaW5mby50aTIKCiAgICAgICAgICAgIGluZm8ud2VpZ2h0ID0gbmlsCiAgICAgICAg
ICAgIGluZm8ueDEgICAgID0geDEgKyBkeCAqIHRpMQogICAgICAgICAgICBpbmZvLnkxICAgICA9
IHkxICsgZHkgKiB0aTEKICAgICAgICAgICAgaW5mby54MiAgICAgPSB4MSArIGR4ICogdGkyCiAg
ICAgICAgICAgIGluZm8ueTIgICAgID0geTEgKyBkeSAqIHRpMgogICAgICAgIGVuZAogICAgICAg
IHJldHVybiBpdGVtSW5mbywgbGVuCiAgICBlbmQKCiAgICAtLS0gTWFpbiBtZXRob2RzCgogICAg
ZnVuY3Rpb24gV29ybGQ6YWRkKGl0ZW0sIHgsIHksIHcsIGgpCiAgICAgICAgbG9jYWwgcmVjdCA9
IHNlbGYucmVjdHNbaXRlbV0KICAgICAgICBpZiByZWN0IHRoZW4KICAgICAgICAgICAgYXNzZXJ0
KGZhbHNlLCAnSXRlbSAnIC4uIHRvc3RyaW5nKGl0ZW0pIC4uICcgYWRkZWQgdG8gdGhlIHdvcmxk
IHR3aWNlLicpCiAgICAgICAgZW5kCiAgICAgICAgYXNzZXJ0SXNSZWN0KHgsIHksIHcsIGgpCgog
ICAgICAgIHNlbGYucmVjdHNbaXRlbV0gPSB7IHggPSB4LCB5ID0geSwgdyA9IHcsIGggPSBoIH0K
CiAgICAgICAgbG9jYWwgY2wsIGN0LCBjdywgY2ggPSBncmlkX3RvQ2VsbFJlY3Qoc2VsZi5jZWxs
U2l6ZSwgeCwgeSwgdywgaCkKICAgICAgICBmb3IgY3kgPSBjdCwgY3QgKyBjaCAtIDEgZG8KICAg
ICAgICAgICAgZm9yIGN4ID0gY2wsIGNsICsgY3cgLSAxIGRvCiAgICAgICAgICAgICAgICBhZGRJ
dGVtVG9DZWxsKHNlbGYsIGl0ZW0sIGN4LCBjeSkKICAgICAgICAgICAgZW5kCiAgICAgICAgZW5k
CgogICAgICAgIHJldHVybiBpdGVtCiAgICBlbmQKCiAgICBmdW5jdGlvbiBXb3JsZDpyZW1vdmUo
aXRlbSkKICAgICAgICBsb2NhbCB4LCB5LCB3LCBoID0gc2VsZjpnZXRSZWN0KGl0ZW0pCgogICAg
ICAgIHNlbGYucmVjdHNbaXRlbV0gPSBuaWwKICAgICAgICBsb2NhbCBjbCwgY3QsIGN3LCBjaCA9
IGdyaWRfdG9DZWxsUmVjdChzZWxmLmNlbGxTaXplLCB4LCB5LCB3LCBoKQogICAgICAgIGZvciBj
eSA9IGN0LCBjdCArIGNoIC0gMSBkbwogICAgICAgICAgICBmb3IgY3ggPSBjbCwgY2wgKyBjdyAt
IDEgZG8KICAgICAgICAgICAgICAgIHJlbW92ZUl0ZW1Gcm9tQ2VsbChzZWxmLCBpdGVtLCBjeCwg
Y3kpCiAgICAgICAgICAgIGVuZAogICAgICAgIGVuZAogICAgZW5kCgogICAgZnVuY3Rpb24gV29y
bGQ6dXBkYXRlKGl0ZW0sIHgyLCB5MiwgdzIsIGgyKQogICAgICAgIGxvY2FsIHgxLCB5MSwgdzEs
IGgxID0gc2VsZjpnZXRSZWN0KGl0ZW0pCiAgICAgICAgdzIsIGgyID0gdzIgb3IgdzEsIGgyIG9y
IGgxCiAgICAgICAgYXNzZXJ0SXNSZWN0KHgyLCB5MiwgdzIsIGgyKQoKICAgICAgICBpZiB4MSB_
PSB4MiBvciB5MSB_PSB5MiBvciB3MSB_PSB3MiBvciBoMSB_PSBoMiB0aGVuCiAgICAgICAgICAg
IGxvY2FsIGNlbGxTaXplID0gc2VsZi5jZWxsU2l6ZQogICAgICAgICAgICBsb2NhbCBjbDEsIGN0
MSwgY3cxLCBjaDEgPSBncmlkX3RvQ2VsbFJlY3QoY2VsbFNpemUsIHgxLCB5MSwgdzEsIGgxKQog
ICAgICAgICAgICBsb2NhbCBjbDIsIGN0MiwgY3cyLCBjaDIgPSBncmlkX3RvQ2VsbFJlY3QoY2Vs
bFNpemUsIHgyLCB5MiwgdzIsIGgyKQoKICAgICAgICAgICAgaWYgY2wxIH49IGNsMiBvciBjdDEg
fj0gY3QyIG9yIGN3MSB_PSBjdzIgb3IgY2gxIH49IGNoMiB0aGVuCiAgICAgICAgICAgICAgICBs
b2NhbCBjcjEsIGNiMSA9IGNsMSArIGN3MSAtIDEsIGN0MSArIGNoMSAtIDEKICAgICAgICAgICAg
ICAgIGxvY2FsIGNyMiwgY2IyID0gY2wyICsgY3cyIC0gMSwgY3QyICsgY2gyIC0gMQogICAgICAg
ICAgICAgICAgbG9jYWwgY3lPdXQKCiAgICAgICAgICAgICAgICBmb3IgY3kgPSBjdDEsIGNiMSBk
bwogICAgICAgICAgICAgICAgICAgIGN5T3V0ID0gY3kgPCBjdDIgb3IgY3kgPiBjYjIKICAgICAg
ICAgICAgICAgICAgICBmb3IgY3ggPSBjbDEsIGNyMSBkbwogICAgICAgICAgICAgICAgICAgICAg
ICBpZiBjeU91dCBvciBjeCA8IGNsMiBvciBjeCA_IGNyMiB0aGVuCiAgICAgICAgICAgICAgICAg
ICAgICAgICAgICByZW1vdmVJdGVtRnJvbUNlbGwoc2VsZiwgaXRlbSwgY3gsIGN5KQogICAgICAg
ICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAg
ICAgIGVuZAoKICAgICAgICAgICAgICAgIGZvciBjeSA9IGN0MiwgY2IyIGRvCiAgICAgICAgICAg
ICAgICAgICAgY3lPdXQgPSBjeSA8IGN0MSBvciBjeSA_IGNiMQogICAgICAgICAgICAgICAgICAg
IGZvciBjeCA9IGNsMiwgY3IyIGRvCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIGN5T3V0IG9y
IGN4IDwgY2wxIG9yIGN4ID4gY3IxIHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFk
ZEl0ZW1Ub0NlbGwoc2VsZiwgaXRlbSwgY3gsIGN5KQogICAgICAgICAgICAgICAgICAgICAgICBl
bmQKICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAg
ICBlbmQKCiAgICAgICAgICAgIGxvY2FsIHJlY3QgPSBzZWxmLnJlY3RzW2l0ZW1dCiAgICAgICAg
ICAgIHJlY3QueCwgcmVjdC55LCByZWN0LncsIHJlY3QuaCA9IHgyLCB5MiwgdzIsIGgyCiAgICAg
ICAgZW5kCiAgICBlbmQKCiAgICBmdW5jdGlvbiBXb3JsZDptb3ZlKGl0ZW0sIGdvYWxYLCBnb2Fs
WSwgZmlsdGVyKQogICAgICAgIGxvY2FsIGFjdHVhbFgsIGFjdHVhbFksIGNvbHMsIGxlbiA9IHNl
bGY6Y2hlY2soaXRlbSwgZ29hbFgsIGdvYWxZLCBmaWx0ZXIpCgogICAgICAgIHNlbGY6dXBkYXRl
KGl0ZW0sIGFjdHVhbFgsIGFjdHVhbFkpCgogICAgICAgIHJldHVybiBhY3R1YWxYLCBhY3R1YWxZ
LCBjb2xzLCBsZW4KICAgIGVuZAoKICAgIGZ1bmN0aW9uIFdvcmxkOmNoZWNrKGl0ZW0sIGdvYWxY
LCBnb2FsWSwgZmlsdGVyKQogICAgICAgIGZpbHRlciA9IGZpbHRlciBvciBkZWZhdWx0RmlsdGVy
CgogICAgICAgIGxvY2FsIHZpc2l0ZWQgPSB7IFtpdGVtXSA9IHRydWUgfQogICAgICAgIGxvY2Fs
IHZpc2l0ZWRGaWx0ZXIgPSBmdW5jdGlvbihpdG0sIG90aGVyKQogICAgICAgICAgICBpZiB2aXNp
dGVkW290aGVyXSB0aGVuIHJldHVybiBmYWxzZSBlbmQKICAgICAgICAgICAgcmV0dXJuIGZpbHRl
cihpdG0sIG90aGVyKQogICAgICAgIGVuZAoKICAgICAgICBsb2NhbCBjb2xzLCBsZW4gPSB7fSwg
MAoKICAgICAgICBsb2NhbCB4LCB5LCB3LCBoID0gc2VsZjpnZXRSZWN0KGl0ZW0pCgogICAgICAg
IGxvY2FsIHByb2plY3RlZF9jb2xzLCBwcm9qZWN0ZWRfbGVuID0gc2VsZjpwcm9qZWN0KGl0ZW0s
IHgsIHksIHcsIGgsIGdvYWxYLCBnb2FsWSwgdmlzaXRlZEZpbHRlcikKCiAgICAgICAgd2hpbGUg
cHJvamVjdGVkX2xlbiA_IDAgZG8KICAgICAgICAgICAgbG9jYWwgY29sICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICA9IHByb2plY3RlZF9jb2xzWzFdCiAgICAgICAgICAgIGxlbiAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPSBsZW4gKyAxCiAgICAgICAg
ICAgIGNvbHNbbGVuXSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPSBjb2wKCiAg
ICAgICAgICAgIHZpc2l0ZWRbY29sLm90aGVyXSAgICAgICAgICAgICAgICAgICAgICAgICAgPSB0
cnVlCgogICAgICAgICAgICBsb2NhbCByZXNwb25zZSAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgID0gZ2V0UmVzcG9uc2VCeU5hbWUoc2VsZiwgY29sLnR5cGUpCgogICAgICAgICAgICBnb2Fs
WCwgZ29hbFksIHByb2plY3RlZF9jb2xzLCBwcm9qZWN0ZWRfbGVuID0gcmVzcG9uc2UoCiAgICAg
ICAgICAgICAgICBzZWxmLAogICAgICAgICAgICAgICAgY29sLAogICAgICAgICAgICAgICAgeCwg
eSwgdywgaCwKICAgICAgICAgICAgICAgIGdvYWxYLCBnb2FsWSwKICAgICAgICAgICAgICAgIHZp
c2l0ZWRGaWx0ZXIKICAgICAgICAgICAgKQogICAgICAgIGVuZAoKICAgICAgICByZXR1cm4gZ29h
bFgsIGdvYWxZLCBjb2xzLCBsZW4KICAgIGVuZAoKICAgIC0tIFB1YmxpYyBsaWJyYXJ5IGZ1bmN0
aW9ucwoKICAgIGJ1bXAubmV3V29ybGQgPSBmdW5jdGlvbihjZWxsU2l6ZSkKICAgICAgICBjZWxs
U2l6ZSA9IGNlbGxTaXplIG9yIDY0CiAgICAgICAgYXNzZXJ0SXNQb3NpdGl2ZU51bWJlcihjZWxs
U2l6ZSwgJ2NlbGxTaXplJykKICAgICAgICBsb2NhbCB3b3JsZCA9IHNldG1ldGF0YWJsZSh7CiAg
ICAgICAgICAgIGNlbGxTaXplICAgICAgPSBjZWxsU2l6ZSwKICAgICAgICAgICAgcmVjdHMgICAg
ICAgICA9IHt9LAogICAgICAgICAgICByb3dzICAgICAgICAgID0ge30sCiAgICAgICAgICAgIG5v
bkVtcHR5Q2VsbHMgPSB7fSwKICAgICAgICAgICAgcmVzcG9uc2VzICAgICA9IHt9CiAgICAgICAg
fSwgV29ybGRfbXQpCgogICAgICAgIHdvcmxkOmFkZFJlc3BvbnNlKCd0b3VjaCcsIHRvdWNoKQog
ICAgICAgIHdvcmxkOmFkZFJlc3BvbnNlKCdjcm9zcycsIGNyb3NzKQogICAgICAgIHdvcmxkOmFk
ZFJlc3BvbnNlKCdzbGlkZScsIHNsaWRlKQogICAgICAgIHdvcmxkOmFkZFJlc3BvbnNlKCdib3Vu
Y2UnLCBib3VuY2UpCgogICAgICAgIHJldHVybiB3b3JsZAogICAgZW5kCgogICAgYnVtcC5yZWN0
ID0gewogICAgICAgIGdldE5lYXJlc3RDb3JuZXIgICAgICAgICAgICAgID0gcmVjdF9nZXROZWFy
ZXN0Q29ybmVyLAogICAgICAgIGdldFNlZ21lbnRJbnRlcnNlY3Rpb25JbmRpY2VzID0gcmVjdF9n
ZXRTZWdtZW50SW50ZXJzZWN0aW9uSW5kaWNlcywKICAgICAgICBnZXREaWZmICAgICAgICAgICAg
ICAgICAgICAgICA9IHJlY3RfZ2V0RGlmZiwKICAgICAgICBjb250YWluc1BvaW50ICAgICAgICAg
ICAgICAgICA9IHJlY3RfY29udGFpbnNQb2ludCwKICAgICAgICBpc0ludGVyc2VjdGluZyAgICAg
ICAgICAgICAgICA9IHJlY3RfaXNJbnRlcnNlY3RpbmcsCiAgICAgICAgZ2V0U3F1YXJlRGlzdGFu
Y2UgICAgICAgICAgICAgPSByZWN0X2dldFNxdWFyZURpc3RhbmNlLAogICAgICAgIGRldGVjdENv
bGxpc2lvbiAgICAgICAgICAgICAgID0gcmVjdF9kZXRlY3RDb2xsaXNpb24KICAgIH0KCiAgICBi
dW1wLnJlc3BvbnNlcyA9IHsKICAgICAgICB0b3VjaCAgPSB0b3VjaCwKICAgICAgICBjcm9zcyAg
PSBjcm9zcywKICAgICAgICBzbGlkZSAgPSBzbGlkZSwKICAgICAgICBib3VuY2UgPSBib3VuY2UK
ICAgIH0KCiAgICByZXR1cm4gYnVtcAplbmQKCmJ1bXAgPSBfX21ha2VfYnVtcCgpCl9fbWFrZV9i
dW1wID0gbmls
:: libs/debug.lua
--[[pod_format="raw",created="2024-05-06 21:26:16",modified="2024-05-07 02:24:58",revision=428]]
function todo(msg)
	error("TODO: "..msg)
end	

function assert_table_contains_all_fields(tbl, ...)
    local fields = {...}
    for i, field in ipairs(fields) do
        assert(tbl[field] ~= nil, "Expected table to contain a non-nil field '"..field.."'!")
    end
end

function assert_table_contains_any_field(tbl, ...)
    local fields = {...}
    local fieldExists = false
    for i, field in ipairs(fields) do
        if tbl[field] ~= nil then
            fieldExists = true
            break
        end
    end
    
    assert(fieldExists, "Expected table to contain at least one non-nil field from the provided list: " .. table.concat(fields, ", "))
end

function assert_is_point(tbl)
	assert(type(tbl) == "table", "Expected 'point' to be a table!")
	assert_table_contains_all_fields(tbl, "x", "y")
end

--- Checks that `tbl` has the fields for a rectangle
function assert_is_rect(tbl)
	assert(type(tbl) == "table", "Expected 'rect' to be a table but got '"..type(tbl).."'!")
	assert_table_contains_all_fields(tbl, "x", "y", "w", "h")
end

function assert_is_circle(tbl)
	assert(type(tbl) == "table", "Expected 'circle' to be a table but got '"..type(tbl).."'!")
	assert_table_contains_all_fields(tbl, "x", "y", "r")
end
:: libs/gmath.lua
--[[pod_format="raw",created="2024-05-05 19:53:05",modified="2024-05-07 02:24:58",revision=293]]
gmath = {}

function gmath.clamp(num, n_min, n_max)
	if num < n_min then
		return n_min
	elseif num > n_max then
		return n_max
	else
		return num
	end
end

function gmath.distance(x1, y1, x2, y2)
  return sqrt((x2 - x1) ^ 2 + (y2 - y1) ^ 2)
end
:: libs/physics.lua
--[[pod_format="raw",created="2024-05-06 21:22:36",modified="2024-05-07 02:24:58",revision=503]]
physics = {}

function physics.is_point_in_rect(px, py, rx1, ry1, rx2, ry2)
	if type(px) == "table" then
		-- if x1 is a table then assume y2 is as well and extract the proper fields
		assert_is_point(px)
		assert_is_rect(py)
		
		rx1, ry1, rx2, ry2 = py.x, py.y, py.w, py.h
		rx2 = rx1 + rx2
		ry2 = ry1 + ry2
		
		px, py = px.x, px.y
	end

	local is_x = px >= rx1 and px <= rx2
	local is_y = py >= ry1 and py <= ry2
	
	return is_x and is_y
end

-- Collision detection function;
-- Returns true if two boxes overlap, false if they don't;
function physics.do_rectangles_overlap(x1,y1,w1,h1, x2,y2,w2,h2)
	if type(x1) == "table" then
		-- if x1 is a table then assume y2 is as well and extract the proper fields
		assert_is_rect(x1)
		assert_is_rect(y1)
		
		x2, y2, w2, h2 = y1.x, y1.y, y1.w, y1.h
		x1, y1, w1, h1 = x1.x, x1.y, x1.w, x1.h
	end

	-- https://www.love2d.org/wiki/BoundingBox.lua
	return x1 < x2+w2 and
	       x2 < x1+w1 and
	       y1 < y2+h2 and
	       y2 < y1+h1
end


function physics.get_rect_collision_direction(rect1, rect2)
	-- no colision for the same entity
	if rect1 == rect2 then return nil end 
	
	local are_colliding = physics.do_rectangles_overlap(rect1, rect2)
	
	if not are_colliding then return nil end
	
	-- otherwise, get the relative direction to center
	
	-- Calculate the centers of the rectangles
   local cx1 = rect1.x + rect1.w / 2
   local cy1 = rect1.y + rect1.h / 2
   local cx2 = rect2.x + rect2.w / 2
   local cy2 = rect2.y + rect2.h / 2
   
   -- Calculate the angle from the center of rect1 to the center of rect2
   local angle = atan2(cy2 - cy1, cx2 - cx1) * 180 / math.pi
   
   return angle
end


function physics.do_circles_overlap(x1,y1,r1, x2,y2,r2)
	if type(x1) == "table" then
		-- if x1 is a table then assume y2 is as well and extract the proper fields
		assert_is_circle(x1)
		assert_is_circle(y1)
		
		x2, y2, r2 = y1.x, y1.y, y1.r
		x1, y1, r1 = x1.x, x1.y, x1.r
	end

	local distance = gmath.distance(x1,y1, x2,y2)
	return distance - (r1+r2) < 0 
end


function physics.get_circ_collision_direction(circ1, circ2)
	-- no colision for the same entity
	if circ1 == circ2 then return nil end 
	
	local are_colliding = physics.do_circles_overlap(circ1, circ2)
	
	if not are_colliding then return nil end
	
	-- otherwise, get the relative direction to center
   
   -- Calculate the angle from the center of rect1 to the center of rect2
   local angle = atan2(circ2.y - circ1.y, circ2.x - circ1.x) * 180 / math.pi
   
 	-- and resolve the colision
 	local actualCirc1Pos = {} 
 	local actualCirc2Pos = {} 
 	todo("need to implement circle colision resolution!")
 
   return angle
end


function physics.angle_to_direction(angle)
    -- Convert angle from radians to degrees
    angle = angle * 180 / math.pi

    angle = angle % 360  -- Normalize the angle to the range [0, 360)
    if angle < 45 or angle >= 315 then
        return "right"
    elseif angle < 135 then
        return "top"
    elseif angle < 225 then
        return "left"
    else
        return "bottom"
    end
end
:: libs/polyfill.lua
--[[pod_format="raw",created="2024-05-06 23:33:10",modified="2024-05-06 23:39:36",revision=15]]
function quicksort(t, low, high)
    if low < high then
        local pi = partition(t, low, high)

        quicksort(t, low, pi - 1)
        quicksort(t, pi + 1, high)
    end
end

function partition(t, low, high)
    local pivot = t[high]
    local i = low - 1
    for j = low, high - 1 do
        if t[j] <= pivot then
            i = i + 1
            t[i], t[j] = t[j], t[i]
        end
    end
    t[i + 1], t[high] = t[high], t[i + 1]
    return i + 1
end

function table.sort(t)
    quicksort(t, 1, #t)
end
:: libs/.info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTA1LTA1IDE5OjUyOjU4Iixtb2RpZmllZD0iMjAyNC0w
NS0wNyAwMjoyNDo1OCJdXWx6NAAEAAAAAwAAADBuaWw=
:: map/0.map
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTA1LTA1IDE4OjQ2OjA4Iixtb2RpZmllZD0iMjAyNC0w
NS0wNyAwMjoyNDo1OCIscmV2aXNpb249MTE4OF1dbHo0AGgAAABYEAAA8Ah7e2JtcD11c2VyZGF0
YSgiaTE2IiwzMgMALyIwAQD--------------------78QgiKSxoaWRkZW49ZmFsc2UscGFuX3g9
MAgA0nk9MCx0aWxlX2g9MTYKABB3CgCAem9vbT0xfX0=
:: map/.info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTA1LTA1IDE4OjQ2OjA3Iixtb2RpZmllZD0iMjAyNC0w
NS0wNyAwMjoyNDo1OCJdXWx6NAAEAAAAAwAAADBuaWw=
:: scenes/bouncing_scene.lua
--[[pod_format="raw",created="2024-05-05 19:20:24",modified="2024-05-07 02:24:58",revision=1142]]
-- defines the explosion scene code

function init_bouncing_scene()
	local ss = {
		things={}
	}

	function ss:init()
		
	end

	function ss:update()
		if keyp("q") then
			for _, t in pairs(self.things) do
				t.sx *= 1.5
			end
		end
		if keyp("w") then
			for _, t in pairs(self.things) do
				t.sx *= 0.2
			end
		end

		if keyp("space") then
			local r = 10 + rnd(30)
			local mean = 10
			local stdev = mean / 2
		
			add(self.things, {
				x = gmath.clamp(rnd(SCREEN_WIDTH), 0, SCREEN_WIDTH-r-1),
				y = gmath.clamp(rnd(SCREEN_HEIGHT), 0, SCREEN_HEIGHT-r-1),
				r = r,
				sx = rnd(mean) - stdev,
				sy = rnd(mean) - stdev,
				c_inner = rnd(4*8),
				c_outer = rnd(4*8),
			})
		end
		
		for _, t in ipairs(self.things) do
			t.x += t.sx
			t.y += t.sy
			
			if t.x + t.r >= SCREEN_WIDTH or
			   t.x - t.r <= 0 then
				t.sx *= -1
			end
			
			if t.y + t.r >= SCREEN_HEIGHT or
		      t.y - t.r <= 0 then
		      t.sy *= -1
		   end
		   
			-- collide
			for _, other in ipairs(self.things) do
				local collision_angle = physics.get_circ_collision_direction(t, other)
				if collision_angle ~= nil then
					local collision = physics.angle_to_direction(collision_angle)
					
					todo(-[[
						instead of doing a simplistic directional flip, we should
						use the angle information we already have and just move (both)
						circles in that direction (perhaps there's a way to add it to
						the current velocity so that we only bounce on the normal of the
						colision?
					]])
					
					if collision == "top" or collision == "bottom" then 
						t.sy *= -1 
					elseif collision == "left" or collision == "right" then
						t.sx *= -1
					end
				end
			end
		end
	end
	
	function ss:draw()
		cls(0)
		--print(#self.circles, 0,0,0)
		
		for _, t in pairs(self.things) do
			circfill	(t.x, t.y, t.r, t.c_inner)
			circ		(t.x, t.y, t.r, t.c_outer)
		end
	end
	
	return ss
end
:: scenes/explosion_scene.lua
--[[pod_format="raw",created="2024-05-05 19:20:24",modified="2024-05-06 22:09:09",revision=485]]
-- defines the explosion scene code

function init_explosion_scene()
	local exps = {
		current_direction = "explode",
		circles={}
	}

	function exps:init()
		
	end

	function exps:update()
		if keyp("q") then
			if self.current_direction == "explode" then
				self.current_direction = "implode"
			else
				self.current_direction = "explode"
			end
		end

		if keyp("space") then
			add(self.circles, {
				x = rnd(SCREEN_WIDTH),
				y = rnd(SCREEN_HEIGHT),
				r = rnd(10 + 30),
				s = rnd(0.4 + 30 / 60),
				c_inner = rnd(4*8),
				c_outer = rnd(4*8),
			})
		end
		
		for i = #self.circles, 1, -1 do
			local c = self.circles[i]
			if self.current_direction == "explode" then
				c.r -= c.s
				if c.r <= 0 then
					table.remove(self.circles, i)
				end
			else
				c.r += c.s
				if c.r >= SCREEN_WIDTH then
					table.remove(self.circles, i)
				end
			end
		end
	end
	
	function exps:draw()
		cls(1)		
		for _, c in pairs(self.circles) do
			circfill	(c.x, c.y, c.r, c.c_inner)
			circ		(c.x, c.y, c.r, c.c_outer)
		end
		
		print("Num entities: "..#self.circles, 5,5,0)
		?"Press 'space' to spawn new one"
		?"Press 'q' to invert direction"
	end
	
	return exps
end
:: scenes/intro_scene.lua
--[[pod_format="raw",created="2024-05-05 19:04:25",modified="2024-05-07 02:12:17",revision=753]]
-- defines the intro scene code

function init_intro_scene()
	local intros = {
		buttons={
			{"Explosions", function ()
				SCENE_MANAGER:chance_scene(init_explosion_scene())
			  end },
			{"Bouncing Things", function ()
				SCENE_MANAGER:chance_scene(init_bouncing_scene())
			  end},
			{"Orbits", function ()
				todo("Orbits scene not implemented yet")
			  end},
		}
	}

	function intros:init()
		self.player = {
			x=SCREEN_WIDTH/2,
			y=SCREEN_HEIGHT/2,
		}
		
		-- actually build button definitions
		local next_btn_x, next_btn_y = 10, 20
		local btn_height = 14
		local btn_spacing = 2
		local padding = 2
		self.hydrated_btns = {}
		for _, button_def in pairs(self.buttons) do
			local btn_name, btn_fn = unpack(button_def)
		   local curr = {
		   		x=next_btn_x, y=next_btn_y,
		   		text=btn_name, fn=btn_fn,
		   		padding=padding,
		   		h=btn_height,
		   		w=nil, -- we set this in the draw later
		   }
		   
		  	next_btn_y += btn_height + btn_spacing + (padding * 2)
		   
		  	add(self.hydrated_btns, curr)
		end
	end

	function intros:update()
		-- mouse_b is a bitfield: 0x1 means left mouse button, 0x2 right mouse button
		local mx, my, mouse_b = mouse()
		self.player.x = mx
		self.player.y = my
		
		if mouse_b == 1 then
			-- see if we're clicking one of the buttons
			for _, bt in pairs(self.hydrated_btns) do			
				if physics.is_point_in_rect({x=mx, y=my}, bt) then
					bt:fn()
					break
				end
			end
		end
	end
	
	function intros:draw()
		cls(0)
		print("Welcome!", 10, 5, 3)
		
		-- Actually draw buttons
		for _, bt in pairs(self.hydrated_btns) do
			local pd = bt.padding
			if bt.w == nil then
				local tw = print(bt.text, 0, -20)
				bt.w = tw+pd*2
			end
			
			local btn_width = bt.w
			local btn_height = bt.h
			
			rectfill	(bt.x, bt.y, bt.x+btn_width, bt.y+btn_height, 4) 
			rect		(bt.x, bt.y, bt.x+btn_width, bt.y+btn_height, 1)
			print		(bt.text, bt.x+pd*1.5, bt.y+pd*1.5)
		end
	end
	
	return intros
end
:: scenes/scene_manager.lua
--[[pod_format="raw",created="2024-05-05 19:05:00",modified="2024-05-06 15:14:21",revision=396]]
-- scene manager takes care to properly render the scene that's currently
-- supposed to be displayed.

-- builds and returns a new scene manager
function init_scene_manager()
	local scene_manager = {
		current_scene = nil
	}
	
	-- current scene invoke callbacks
	function scene_manager:chance_scene(new_scene)
		assert(new_scene ~= nil, "New scene can't be nil!")
		assert(new_scene["init"] ~= nil, "New scene does not have init method!")
		assert(new_scene["draw"] ~= nil, "New scene does not have draw method!")
		assert(new_scene["update"] ~= nil, "New scene does not have update method!")
		
		if self.current_scene ~= nil and self.current_scene["deinit"] ~= nil then
			self.current_scene:deinit()
		end

		new_scene:init()
		self.current_scene = new_scene
	end

	function scene_manager:update()
		if self.current_scene ~= nil then
			self.current_scene:update()
		end
	end
	
	function scene_manager:draw()
		if self.current_scene ~= nil then
			self.current_scene:draw()
		end
	end
	
	return scene_manager
end
:: scenes/.info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTA1LTA1IDE5OjA0OjE2Iixtb2RpZmllZD0iMjAyNC0w
NS0wNyAwMjoyNDo1OCJdXWx6NAAEAAAAAwAAADBuaWw=
:: sfx/0.sfx
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTA1LTA1IDE4OjQ2OjA4Iixtb2RpZmllZD0iMjAyNC0w
NS0wNyAwMjoyNDo1OCIscmV2aXNpb249MTE4OV1dbHo0AKkAAACSFwAA-yxweHUAAygAAAQABA9A
EAIOAAGgASACoA4ADxAADfDKAQIDBAUGBwAP-5AICQoLDwwPDQ8ODw8AD--w-wEA6-8n0gEQBg8g
EAEgASAB8AACEAIMEAEgDyEgATAPQPDDDygP--DGD-gKD-8PgA-3Dw0B8AkBEAYMMAD------70f
-wEArL-ID0AADUD--7DwcAoA--------------------hFD-sPD-OQ==
:: sfx/.info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTA1LTA1IDE4OjQ2OjA3Iixtb2RpZmllZD0iMjAyNC0w
NS0wNyAwMjoyNDo1OCJdXWx6NAAEAAAAAwAAADBuaWw=
:: constants.lua
--[[pod_format="raw",created="2024-05-05 18:56:02",modified="2024-05-07 02:24:58",revision=775]]
SCREEN_WIDTH = 480
SCREEN_HEIGHT = 270
:: main.lua
--[[pod_format="raw",created="2024-05-05 18:46:08",modified="2024-05-07 02:24:58",revision=1293]]
include "constants.lua"

include "libs/debug.lua"
include "libs/gmath.lua"
include "libs/physics.lua"

include "scenes/scene_manager.lua"
include "scenes/intro_scene.lua"
include "scenes/explosion_scene.lua"
include "scenes/bouncing_scene.lua"

function _init()
   poke(0x5f5c, 255) -- set the initial delay before repeating. 255 means never repeat (0 is default).

	SCENE_MANAGER = init_scene_manager()
	SCENE_MANAGER:chance_scene(
		init_intro_scene()
		
		--init_explosion_scene()	
		--init_bouncing_scene()
	)
end

function _update()
	SCENE_MANAGER:update()
end

function _draw()	SCENE_MANAGER:draw()
end
:: .info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTA1LTA1IDE5OjAzOjIwIixtb2RpZmllZD0iMjAyNC0w
NS0wNyAwMjoyNDo1OCIscnVudGltZT03LHdvcmtzcGFjZXM9e3tsb2NhdGlvbj0ibWFpbi5sdWEj
MTciLHdvcmtzcGFjZV9pbmRleD0xfSx7bG9jYXRpb249ImNvbnN0YW50cy5sdWEjMiIsd29ya3Nw
YWNlX2luZGV4PTF9LHtsb2NhdGlvbj0ic2NlbmVzL2JvdW5jaW5nX3NjZW5lLmx1YSM1OCIsd29y
a3NwYWNlX2luZGV4PTF9LHtsb2NhdGlvbj0ibGlicy9waHlzaWNzLmx1YSM5NiIsd29ya3NwYWNl
X2luZGV4PTF9LHtsb2NhdGlvbj0ibGlicy9kZWJ1Zy5sdWEjMzYiLHdvcmtzcGFjZV9pbmRleD0x
fSx7bG9jYXRpb249ImxpYnMvZ21hdGgubHVhIzE0Iix3b3Jrc3BhY2VfaW5kZXg9MX0se2xvY2F0
aW9uPSJnZngvMC5nZngiLHdvcmtzcGFjZV9pbmRleD0yfSx7bG9jYXRpb249Im1hcC8wLm1hcCIs
d29ya3NwYWNlX2luZGV4PTN9LHtsb2NhdGlvbj0ic2Z4LzAuc2Z4Iix3b3Jrc3BhY2VfaW5kZXg9
NH19XV1sejQABAAAAAMAAAAwbmls
:: [eoc]
