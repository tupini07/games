picotron cartridge // www.picotron.net
version 2

:: gfx/
:: map/
:: sfx/
:: scenes/
:: libs/
:: gfx/0.gfx
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTA1LTA1IDE4OjQ2OjA5Iixtb2RpZmllZD0iMjAyNC0w
NS0yMSAxNToxNTozOCIscmV2aXNpb249MTQwNV1dbHo0AG0AAAAFMQAA8xR7WzBdPXtibXA9cHh1
AEMgEBAE8PAsZmxhZ3M9MCxwYW5feAgAz3k9MCx6b29tPTh9LDEA------------------------
----------------------------------------51BtPTh9fQ==
:: gfx/.info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTA1LTA1IDE4OjQ2OjA3Iixtb2RpZmllZD0iMjAyNC0w
NS0yMSAxNToxNTozOCJdXWx6NAAEAAAAAwAAADBuaWw=
:: libs/debug.lua
--[[pod_format="raw",created="2024-05-06 21:26:16",modified="2024-05-21 15:15:38",revision=639]]
function todo(msg)
	error("TODO: "..msg)
end	

function assert_table_contains_all_fields(tbl, ...)
    local fields = {...}
    for i, field in ipairs(fields) do
        assert(tbl[field] ~= nil, "Expected table to contain a non-nil field '"..field.."'!")
    end
end

function assert_table_contains_any_field(tbl, ...)
    local fields = {...}
    local fieldExists = false
    for i, field in ipairs(fields) do
        if tbl[field] ~= nil then
            fieldExists = true
            break
        end
    end
    
    assert(fieldExists, "Expected table to contain at least one non-nil field from the provided list: " .. table.concat(fields, ", "))
end

function assert_is_point(tbl)
	assert(type(tbl) == "table", "Expected 'point' to be a table!")
	assert_table_contains_all_fields(tbl, "x", "y")
end

--- Checks that `tbl` has the fields for a rectangle
function assert_is_rect(tbl)
	assert(type(tbl) == "table", "Expected 'rect' to be a table but got '"..type(tbl).."'!")
	assert_table_contains_all_fields(tbl, "x", "y", "w", "h")
end

function assert_is_circle(tbl)
	assert(type(tbl) == "table", "Expected 'circle' to be a table but got '"..type(tbl).."'!")
	assert_table_contains_all_fields(tbl, "x", "y", "r")
end
:: libs/gmath.lua
--[[pod_format="raw",created="2024-05-05 19:53:05",modified="2024-05-21 15:15:38",revision=508]]
gmath = {}

function gmath.clamp(num, n_min, n_max)
	if num < n_min then
		return n_min
	elseif num > n_max then
		return n_max
	else
		return num
	end
end

function gmath.distance(x1, y1, x2, y2)
	return sqrt((x2 - x1) ^ 2 + (y2 - y1) ^ 2)
end

function gmath.normalize(x, y)
	local length = math.sqrt(x * x + y * y)
	if length == 0 then -- To avoid division by zero
		return 0, 0
	else
		return x / length, y / length
	end
end

:: libs/physics.lua
--[[pod_format="raw",created="2024-05-06 21:22:36",modified="2024-05-21 15:15:38",revision=718]]
physics = {}

function physics.is_point_in_rect(px, py, rx1, ry1, rx2, ry2)
	if type(px) == "table" then
		-- if x1 is a table then assume y2 is as well and extract the proper fields
		assert_is_point(px)
		assert_is_rect(py)
		
		rx1, ry1, rx2, ry2 = py.x, py.y, py.w, py.h
		rx2 = rx1 + rx2
		ry2 = ry1 + ry2
		
		px, py = px.x, px.y
	end

	local is_x = px >= rx1 and px <= rx2
	local is_y = py >= ry1 and py <= ry2
	
	return is_x and is_y
end

-- Collision detection function;
-- Returns true if two boxes overlap, false if they don't;
function physics.do_rectangles_overlap(x1,y1,w1,h1, x2,y2,w2,h2)
	if type(x1) == "table" then
		-- if x1 is a table then assume y2 is as well and extract the proper fields
		assert_is_rect(x1)
		assert_is_rect(y1)
		
		x2, y2, w2, h2 = y1.x, y1.y, y1.w, y1.h
		x1, y1, w1, h1 = x1.x, x1.y, x1.w, x1.h
	end

	-- https://www.love2d.org/wiki/BoundingBox.lua
	return x1 < x2+w2 and
	       x2 < x1+w1 and
	       y1 < y2+h2 and
	       y2 < y1+h1
end


function physics.get_rect_collision_direction(rect1, rect2)
	-- no colision for the same entity
	if rect1 == rect2 then return nil end 
	
	local are_colliding = physics.do_rectangles_overlap(rect1, rect2)
	
	if not are_colliding then return nil end
	
	-- otherwise, get the relative direction to center
	
	-- Calculate the centers of the rectangles
   local cx1 = rect1.x + rect1.w / 2
   local cy1 = rect1.y + rect1.h / 2
   local cx2 = rect2.x + rect2.w / 2
   local cy2 = rect2.y + rect2.h / 2
   
   -- Calculate the angle from the center of rect1 to the center of rect2
   local angle = atan2(cy2 - cy1, cx2 - cx1) * 180 / math.pi
   
   return angle
end


function physics.do_circles_overlap(x1,y1,r1, x2,y2,r2)
	if type(x1) == "table" then
		-- if x1 is a table then assume y2 is as well and extract the proper fields
		assert_is_circle(x1)
		assert_is_circle(y1)
		
		x2, y2, r2 = y1.x, y1.y, y1.r
		x1, y1, r1 = x1.x, x1.y, x1.r
	end

	local distance = gmath.distance(x1,y1, x2,y2)
	return distance - (r1+r2) < 0 
end


function physics.get_circ_collision_direction(circ1, circ2)
	-- no colision for the same entity
	if circ1 == circ2 then return nil end 
	
	local are_colliding = physics.do_circles_overlap(circ1, circ2)
	
	if not are_colliding then return nil end
	
	-- otherwise, get the relative direction to center
   
   -- Calculate the angle from the center of rect1 to the center of rect2
   local angle = atan2(circ2.y - circ1.y, circ2.x - circ1.x) * 180 / math.pi
   
    -- and resolve the collision
    local overlap = (circ1.r + circ2.r) - math.sqrt((circ2.x - circ1.x)^2 + (circ2.y - circ1.y)^2)
    local dx = (overlap / 2) * math.cos(angle * math.pi / 180)
    local dy = (overlap / 2) * math.sin(angle * math.pi / 180)

    -- Move the circles away from each other
    local circ1EndPos = {x = circ1.x-dx, y = circ1.y-dy}
    local circ2EndPos = {x = circ2.x+dx, y = circ2.y+dy}

    return angle, circ1EndPos, circ2EndPos
end


function physics.angle_to_direction(angle)
    -- Convert angle from radians to degrees
    angle = angle * 180 / math.pi

    angle = angle % 360  -- Normalize the angle to the range [0, 360)
    if angle < 45 or angle >= 315 then
        return "right"
    elseif angle < 135 then
        return "top"
    elseif angle < 225 then
        return "left"
    else
        return "bottom"
    end
end
:: libs/polyfill.lua
--[[pod_format="raw",created="2024-05-06 23:33:10",modified="2024-05-06 23:39:36",revision=15]]
function quicksort(t, low, high)
    if low < high then
        local pi = partition(t, low, high)

        quicksort(t, low, pi - 1)
        quicksort(t, pi + 1, high)
    end
end

function partition(t, low, high)
    local pivot = t[high]
    local i = low - 1
    for j = low, high - 1 do
        if t[j] <= pivot then
            i = i + 1
            t[i], t[j] = t[j], t[i]
        end
    end
    t[i + 1], t[high] = t[high], t[i + 1]
    return i + 1
end

function table.sort(t)
    quicksort(t, 1, #t)
end
:: libs/.info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTA1LTA1IDE5OjUyOjU4Iixtb2RpZmllZD0iMjAyNC0w
NS0yMSAxNToxNTozOCJdXWx6NAAEAAAAAwAAADBuaWw=
:: map/0.map
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTA1LTA1IDE4OjQ2OjA4Iixtb2RpZmllZD0iMjAyNC0w
NS0yMSAxNToxNTozOCIscmV2aXNpb249MTM5OF1dbHo0AGgAAABYEAAA8Ah7e2JtcD11c2VyZGF0
YSgiaTE2IiwzMgMALyIwAQD--------------------78QgiKSxoaWRkZW49ZmFsc2UscGFuX3g9
MAgA0nk9MCx0aWxlX2g9MTYKABB3CgCAem9vbT0xfX0=
:: map/.info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTA1LTA1IDE4OjQ2OjA3Iixtb2RpZmllZD0iMjAyNC0w
NS0yMSAxNToxNTozOCJdXWx6NAAEAAAAAwAAADBuaWw=
:: scenes/bouncing_scene.lua
--[[pod_format="raw",created="2024-05-05 19:20:24",modified="2024-05-21 15:15:38",revision=1423]]
-- defines the explosion scene code

function init_bouncing_scene()
	local ss = {
		things = {}
	}

	function ss:init()

	end

	function ss:update()
		if keyp("q") then
			for _, t in pairs(self.things) do
				t.sx *= 1.5
			end
		end
		if keyp("w") then
			for _, t in pairs(self.things) do
				t.sx *= 0.2
			end
		end

		if keyp("space") and #self.things < 30 then
			local r = 10 + rnd(30)
			local mean = 10
			local stdev = mean / 2

			add(self.things, {
				x = gmath.clamp(rnd(SCREEN_WIDTH), 0, SCREEN_WIDTH - r - 1),
				y = gmath.clamp(rnd(SCREEN_HEIGHT), 0, SCREEN_HEIGHT - r - 1),
				r = r,
				sx = rnd(mean) - stdev,
				sy = rnd(mean) - stdev,
				c_inner = rnd(4 * 8),
				c_outer = rnd(4 * 8),
			})
		end

		local mx, my, mouse_b = mouse()
		if mouse_b == 1 or mouse_b == 2 then
			for _, t in pairs(self.things) do
				if gmath.distance(mx, my, t.x, t.y) < t.r then
					if mouse_b == 1 then
						-- add random velocity (impulse) of left click
						local angle = atan2(my - t.y, mx - t.x)
						local dir_x = cos(angle)
						local dir_y = sin(angle)
					
						local impulse = 70
						impulse = rnd(impulse) + - (impulse/2)
						
						t.sx = dir_x * impulse
						t.sy = dir_y * impulse
					elseif mouse_b == 2 then
						-- remove ball on right click
						del(self.things, t)
					end
					break
				end
			end
		end

		local gravity = 0.1
		for _, t in ipairs(self.things) do
			t.sx = t.sx
			t.sy = t.sy + gravity

			t.x += t.sx
			t.y += t.sy

			if t.x + t.r >= SCREEN_WIDTH then
				t.sx *= -1
				t.x = SCREEN_WIDTH - t.r
			end
			if t.x - t.r <= 0 then
				t.sx *= -1
				t.x = t.r
			end

			if t.y + t.r >= SCREEN_HEIGHT then
				t.sy *= -1
				t.y = SCREEN_HEIGHT - t.r
			end
			if t.y - t.r <= 0 then
				t.sy *= -1
				t.y = t.r
			end
		end

		-- Track collisions
		local collisions = {}
		for i, t in ipairs(self.things) do
			for j = i + 1, #self.things do
				local other = self.things[j]
				local collision_angle, actualC1Pos, actualC2Pos = physics.get_circ_collision_direction(t, other)
				if collision_angle ~= nil then
					table.insert(collisions, { t, other, collision_angle, actualC1Pos, actualC2Pos })
				end
			end
		end

		-- Resolve positions
		-- Resolve velocities and separate positions
		for _, collision in ipairs(collisions) do
			local t, other, collision_angle, actualC1Pos, actualC2Pos = unpack(collision)

			-- Calculate the normal vector to the collision
			local dx, dy = other.x - t.x, other.y - t.y
			local normal_x, normal_y = gmath.normalize(dx, dy)

			-- Separate the balls to ensure they are not overlapping
			-- Calculate the overlap distance
			local overlap = (t.r + other.r) - gmath.distance(t.x, t.y, other.x, other.y)
			if overlap > 0 then
				-- Apply separation based on the overlap and normal
				t.x = t.x - overlap * normal_x * 0.5
				t.y = t.y - overlap * normal_y * 0.5
				other.x = other.x + overlap * normal_x * 0.5
				other.y = other.y + overlap * normal_y * 0.5
			end

			-- Calculate the relative velocity
			local relative_velocity_x = other.sx - t.sx
			local relative_velocity_y = other.sy - t.sy

			-- Calculate the velocity along the normal
			local velocity_along_normal = relative_velocity_x * normal_x + relative_velocity_y * normal_y

			-- Calculate restitution
			local restitution = 0.7 -- Restitution coefficient (0 = perfectly inelastic, 1 = perfectly elastic)
			local impulse = (-(1 + restitution) * velocity_along_normal) / 2

			-- Apply impulse along the normal
			t.sx = t.sx - impulse * normal_x
			t.sy = t.sy - impulse * normal_y
			other.sx = other.sx + impulse * normal_x
			other.sy = other.sy + impulse * normal_y
		end
	end

	function ss:draw()
		cls(0)

		for _, t in pairs(self.things) do
			circfill(t.x, t.y, t.r, t.c_inner)
			circ(t.x, t.y, t.r, t.c_outer)
		end

		print("Num balls: "..#self.things, 5,5,1)
		?"Press 'space' to spawn new ball"
		?"Left click to add impulse to ball"
		?"Right click to remove ball"

		-- local mx, my, mouse_b = mouse()
		-- circ(mx,my,10, 2)
	end

	return ss
end

:: scenes/explosion_scene.lua
--[[pod_format="raw",created="2024-05-05 19:20:24",modified="2024-05-21 15:15:38",revision=516]]
-- defines the explosion scene code

function init_explosion_scene()
	local exps = {
		current_direction = "explode",
		circles={}
	}

	function exps:init()
		
	end

	function exps:update()
		if keyp("q") then
			if self.current_direction == "explode" then
				self.current_direction = "implode"
			else
				self.current_direction = "explode"
			end
		end

		if keyp("space") then
			add(self.circles, {
				x = rnd(SCREEN_WIDTH),
				y = rnd(SCREEN_HEIGHT),
				r = rnd(10 + 30),
				s = rnd(0.4 + 30 / 60),
				c_inner = rnd(4*8),
				c_outer = rnd(4*8),
			})
		end
		
		for i = #self.circles, 1, -1 do
			local c = self.circles[i]
			if self.current_direction == "explode" then
				c.r -= c.s
				if c.r <= 0 then
					table.remove(self.circles, i)
				end
			else
				c.r += c.s
				if c.r >= SCREEN_WIDTH then
					table.remove(self.circles, i)
				end
			end
		end
	end
	
	function exps:draw()
		cls(1)		
		for _, c in pairs(self.circles) do
			circfill	(c.x, c.y, c.r, c.c_inner)
			circ		(c.x, c.y, c.r, c.c_outer)
		end
		
		print("Num entities: "..#self.circles, 5,5,0)
		?"Press 'space' to spawn new one"
		?"Press 'q' to invert direction"
	end
	
	return exps
end
:: scenes/intro_scene.lua
--[[pod_format="raw",created="2024-05-05 19:04:25",modified="2024-05-21 15:15:38",revision=930]]
-- defines the intro scene code

function init_intro_scene()
	local intros = {
		buttons={
			{"Explosions", function ()
				SCENE_MANAGER:chance_scene(init_explosion_scene())
			  end },
			{"Bouncing Things", function ()
				SCENE_MANAGER:chance_scene(init_bouncing_scene())
			  end},
			{"Orbits", function ()
				todo("Orbits scene not implemented yet")
			  end},
		}
	}

	function intros:init()
		self.player = {
			x=SCREEN_WIDTH/2,
			y=SCREEN_HEIGHT/2,
		}
		
		-- actually build button definitions
		local next_btn_x, next_btn_y = 10, 20
		local btn_height = 14
		local btn_spacing = 2
		local padding = 2
		self.hydrated_btns = {}
		for _, button_def in pairs(self.buttons) do
			local btn_name, btn_fn = unpack(button_def)
		   local curr = {
		   		x=next_btn_x, y=next_btn_y,
		   		text=btn_name, fn=btn_fn,
		   		padding=padding,
		   		h=btn_height,
		   		w=nil, -- we set this in the draw later
		   }
		   
		  	next_btn_y += btn_height + btn_spacing + (padding * 2)
		   
		  	add(self.hydrated_btns, curr)
		end
	end

	function intros:update()
		-- mouse_b is a bitfield: 0x1 means left mouse button, 0x2 right mouse button
		local mx, my, mouse_b = mouse()
		self.player.x = mx
		self.player.y = my
		
		if mouse_b == 1 then
			-- see if we're clicking one of the buttons
			for _, bt in pairs(self.hydrated_btns) do			
				if physics.is_point_in_rect({x=mx, y=my}, bt) then
					bt:fn()
					break
				end
			end
		end
	end
	
	function intros:draw()
		cls(0)
		print("Welcome!", 10, 5, 3)
		
		-- Actually draw buttons
		for _, bt in pairs(self.hydrated_btns) do
			local pd = bt.padding
			if bt.w == nil then
				local tw = print(bt.text, 0, -20)
				bt.w = tw+pd*2
			end
			
			local btn_width = bt.w
			local btn_height = bt.h
			
			rectfill	(bt.x, bt.y, bt.x+btn_width, bt.y+btn_height, 4) 
			rect		(bt.x, bt.y, bt.x+btn_width, bt.y+btn_height, 1)
			print		(bt.text, bt.x+pd*1.5, bt.y+pd*1.5)
		end
	end
	
	return intros
end
:: scenes/scene_manager.lua
--[[pod_format="raw",created="2024-05-05 19:05:00",modified="2024-05-06 15:14:21",revision=396]]
-- scene manager takes care to properly render the scene that's currently
-- supposed to be displayed.

-- builds and returns a new scene manager
function init_scene_manager()
	local scene_manager = {
		current_scene = nil
	}
	
	-- current scene invoke callbacks
	function scene_manager:chance_scene(new_scene)
		assert(new_scene ~= nil, "New scene can't be nil!")
		assert(new_scene["init"] ~= nil, "New scene does not have init method!")
		assert(new_scene["draw"] ~= nil, "New scene does not have draw method!")
		assert(new_scene["update"] ~= nil, "New scene does not have update method!")
		
		if self.current_scene ~= nil and self.current_scene["deinit"] ~= nil then
			self.current_scene:deinit()
		end

		new_scene:init()
		self.current_scene = new_scene
	end

	function scene_manager:update()
		if self.current_scene ~= nil then
			self.current_scene:update()
		end
	end
	
	function scene_manager:draw()
		if self.current_scene ~= nil then
			self.current_scene:draw()
		end
	end
	
	return scene_manager
end
:: scenes/.info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTA1LTA1IDE5OjA0OjE2Iixtb2RpZmllZD0iMjAyNC0w
NS0yMSAxNToxNTozOCJdXWx6NAAEAAAAAwAAADBuaWw=
:: sfx/0.sfx
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTA1LTA1IDE4OjQ2OjA4Iixtb2RpZmllZD0iMjAyNC0w
NS0yMSAxNToxNTozOCIscmV2aXNpb249MTM5OF1dbHo0AKkAAACSFwAA-yxweHUAAygAAAQABA9A
EAIOAAGgASACoA4ADxAADfDKAQIDBAUGBwAP-5AICQoLDwwPDQ8ODw8AD--w-wEA6-8n0gEQBg8g
EAEgASAB8AACEAIMEAEgDyEgATAPQPDDDygP--DGD-gKD-8PgA-3Dw0B8AkBEAYMMAD------70f
-wEArL-ID0AADUD--7DwcAoA--------------------hFD-sPD-OQ==
:: sfx/.info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTA1LTA1IDE4OjQ2OjA3Iixtb2RpZmllZD0iMjAyNC0w
NS0yMSAxNToxNTozOCJdXWx6NAAEAAAAAwAAADBuaWw=
:: constants.lua
--[[pod_format="raw",created="2024-05-05 18:56:02",modified="2024-05-21 15:15:38",revision=986]]
SCREEN_WIDTH = 480
SCREEN_HEIGHT = 270
:: main.lua
--[[pod_format="raw",created="2024-05-05 18:46:08",modified="2024-05-21 15:15:38",revision=1504]]
include "constants.lua"

include "libs/debug.lua"
include "libs/gmath.lua"
include "libs/physics.lua"

include "scenes/scene_manager.lua"
include "scenes/intro_scene.lua"
include "scenes/explosion_scene.lua"
include "scenes/bouncing_scene.lua"

function _init()
   poke(0x5f5c, 255) -- set the initial delay before repeating. 255 means never repeat (0 is default).

	SCENE_MANAGER = init_scene_manager()
	SCENE_MANAGER:chance_scene(
		init_intro_scene()
		
		--init_explosion_scene()	
		--init_bouncing_scene()
	)
end

function _update()
	SCENE_MANAGER:update()
end

function _draw()	SCENE_MANAGER:draw()
end
:: .info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTA1LTA1IDE5OjAzOjIwIixtb2RpZmllZD0iMjAyNC0w
NS0yMSAxNToxNTozOCIscnVudGltZT03LHdvcmtzcGFjZXM9e3tsb2NhdGlvbj0ibWFpbi5sdWEj
MTciLHdvcmtzcGFjZV9pbmRleD0xfSx7bG9jYXRpb249ImNvbnN0YW50cy5sdWEjMiIsd29ya3Nw
YWNlX2luZGV4PTF9LHtsb2NhdGlvbj0ic2NlbmVzL2JvdW5jaW5nX3NjZW5lLmx1YSMxNCIsd29y
a3NwYWNlX2luZGV4PTF9LHtsb2NhdGlvbj0ibGlicy9waHlzaWNzLmx1YSMzNCIsd29ya3NwYWNl
X2luZGV4PTF9LHtsb2NhdGlvbj0ibGlicy9kZWJ1Zy5sdWEjMzYiLHdvcmtzcGFjZV9pbmRleD0x
fSx7bG9jYXRpb249ImxpYnMvZ21hdGgubHVhIzI1Iix3b3Jrc3BhY2VfaW5kZXg9MX0se2xvY2F0
aW9uPSJzY2VuZXMvaW50cm9fc2NlbmUubHVhIzM0Iix3b3Jrc3BhY2VfaW5kZXg9MX0se2xvY2F0
aW9uPSJzY2VuZXMvZXhwbG9zaW9uX3NjZW5lLmx1YSMxIix3b3Jrc3BhY2VfaW5kZXg9MX0se2xv
Y2F0aW9uPSJnZngvMC5nZngiLHdvcmtzcGFjZV9pbmRleD0yfSx7bG9jYXRpb249Im1hcC8wLm1h
cCIsd29ya3NwYWNlX2luZGV4PTN9LHtsb2NhdGlvbj0ic2Z4LzAuc2Z4Iix3b3Jrc3BhY2VfaW5k
ZXg9NH19XV1sejQABAAAAAMAAAAwbmls
:: [eoc]
