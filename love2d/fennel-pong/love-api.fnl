;; This love2d mock API was generated by https://github.com/tupini07/fennel-love2d-api

(var love {:__generator-version :1.0.0 :version :11.4})
(fn love.conf [t]
  "If a file called conf.lua is present in your game folder (or .love file), it is run before the LÖVE modules are loaded. You can use this file to overwrite the love.conf function, which is later called by the LÖVE 'boot' script. Using the love.conf function, you can set some configuration options, and change things like the default size of the window, which modules are loaded, and other stuff.

https://love2d.org/wiki/love.conf"
  {})

(fn love.directorydropped [path]
  "Callback function triggered when a directory is dragged and dropped onto the window.

https://love2d.org/wiki/love.directorydropped"
  {})

(fn love.displayrotated [index orientation]
  "Called when the device display orientation changed, for example, user rotated their phone 180 degrees.

https://love2d.org/wiki/love.displayrotated"
  {})

(fn love.draw {}
  "Callback function used to draw on the screen every frame.

https://love2d.org/wiki/love.draw"
  {})

(fn love.errorhandler [msg]
  "The error handler, used to display error messages.

https://love2d.org/wiki/love.errorhandler"
  {})

(fn love.filedropped [file]
  "Callback function triggered when a file is dragged and dropped onto the window.

https://love2d.org/wiki/love.filedropped"
  {})

(fn love.focus [focus]
  "Callback function triggered when window receives or loses focus.

https://love2d.org/wiki/love.focus"
  {})

(fn love.gamepadaxis [joystick axis value]
  "Called when a Joystick's virtual gamepad axis is moved.

https://love2d.org/wiki/love.gamepadaxis"
  {})

(fn love.gamepadpressed [joystick button]
  "Called when a Joystick's virtual gamepad button is pressed.

https://love2d.org/wiki/love.gamepadpressed"
  {})

(fn love.gamepadreleased [joystick button]
  "Called when a Joystick's virtual gamepad button is released.

https://love2d.org/wiki/love.gamepadreleased"
  {})

(fn love.joystickadded [joystick]
  "Called when a Joystick is connected.

https://love2d.org/wiki/love.joystickadded"
  {})

(fn love.joystickaxis [joystick axis value]
  "Called when a joystick axis moves.

https://love2d.org/wiki/love.joystickaxis"
  {})

(fn love.joystickhat [joystick hat direction]
  "Called when a joystick hat direction changes.

https://love2d.org/wiki/love.joystickhat"
  {})

(fn love.joystickpressed [joystick button]
  "Called when a joystick button is pressed.

https://love2d.org/wiki/love.joystickpressed"
  {})

(fn love.joystickreleased [joystick button]
  "Called when a joystick button is released.

https://love2d.org/wiki/love.joystickreleased"
  {})

(fn love.joystickremoved [joystick]
  "Called when a Joystick is disconnected.

https://love2d.org/wiki/love.joystickremoved"
  {})

(fn love.keypressed [key scancode isrepeat]
  "Callback function triggered when a key is pressed.

https://love2d.org/wiki/love.keypressed"
  {})

(fn love.keyreleased [key scancode]
  "Callback function triggered when a keyboard key is released.

https://love2d.org/wiki/love.keyreleased"
  {})

(fn love.load [arg unfilteredArg]
  "This function is called exactly once at the beginning of the game.

https://love2d.org/wiki/love.load"
  {})

(fn love.lowmemory {}
  "Callback function triggered when the system is running out of memory on mobile devices.

Mobile operating systems may forcefully kill the game if it uses too much memory, so any non-critical resource should be removed if possible (by setting all variables referencing the resources to '''nil'''), when this event is triggered. Sounds and images in particular tend to use the most memory.

https://love2d.org/wiki/love.lowmemory"
  {})

(fn love.mousefocus [focus]
  "Callback function triggered when window receives or loses mouse focus.

https://love2d.org/wiki/love.mousefocus"
  {})

(fn love.mousemoved [x y dx dy istouch]
  "Callback function triggered when the mouse is moved.

https://love2d.org/wiki/love.mousemoved"
  {})

(fn love.mousepressed [x y button istouch presses]
  "Callback function triggered when a mouse button is pressed.

https://love2d.org/wiki/love.mousepressed"
  {})

(fn love.mousereleased [x y button istouch presses]
  "Callback function triggered when a mouse button is released.

https://love2d.org/wiki/love.mousereleased"
  {})

(fn love.quit {}
  "Callback function triggered when the game is closed.

https://love2d.org/wiki/love.quit"
  {})

(fn love.resize [w h]
  "Called when the window is resized, for example if the user resizes the window, or if love.window.setMode is called with an unsupported width or height in fullscreen and the window chooses the closest appropriate size.

https://love2d.org/wiki/love.resize"
  {})

(fn love.run {}
  "The main function, containing the main loop. A sensible default is used when left out.

https://love2d.org/wiki/love.run"
  {})

(fn love.textedited [text start _length]
  "Called when the candidate text for an IME (Input Method Editor) has changed.

The candidate text is not the final text that the user will eventually choose. Use love.textinput for that.

https://love2d.org/wiki/love.textedited"
  {})

(fn love.textinput [text]
  "Called when text has been entered by the user. For example if shift-2 is pressed on an American keyboard layout, the text '@' will be generated.

https://love2d.org/wiki/love.textinput"
  {})

(fn love.threaderror [thread errorstr]
  "Callback function triggered when a Thread encounters an error.

https://love2d.org/wiki/love.threaderror"
  {})

(fn love.touchmoved [id x y dx dy pressure]
  "Callback function triggered when a touch press moves inside the touch screen.

https://love2d.org/wiki/love.touchmoved"
  {})

(fn love.touchpressed [id x y dx dy pressure]
  "Callback function triggered when the touch screen is touched.

https://love2d.org/wiki/love.touchpressed"
  {})

(fn love.touchreleased [id x y dx dy pressure]
  "Callback function triggered when the touch screen stops being touched.

https://love2d.org/wiki/love.touchreleased"
  {})

(fn love.update [dt]
  "Callback function used to update the state of the game every frame.

https://love2d.org/wiki/love.update"
  {})

(fn love.visible [visible]
  "Callback function triggered when window is minimized/hidden or unminimized by the user.

https://love2d.org/wiki/love.visible"
  {})

(fn love.wheelmoved [x y]
  "Callback function triggered when the mouse wheel is moved.

https://love2d.org/wiki/love.wheelmoved"
  {})

(fn love.getVersion {}
  "Gets the current running version of LÖVE.

https://love2d.org/wiki/love.getVersion"
  {})

(fn love.hasDeprecationOutput {}
  "Gets whether LÖVE displays warnings when using deprecated functionality. It is disabled by default in fused mode, and enabled by default otherwise.

When deprecation output is enabled, the first use of a formally deprecated LÖVE API will show a message at the bottom of the screen for a short time, and print the message to the console.

https://love2d.org/wiki/love.hasDeprecationOutput"
  {})

(fn love.isVersionCompatible [version]
  "Gets whether the given version is compatible with the current running version of LÖVE.

https://love2d.org/wiki/love.isVersionCompatible"
  {})

(fn love.setDeprecationOutput [enable]
  "Sets whether LÖVE displays warnings when using deprecated functionality. It is disabled by default in fused mode, and enabled by default otherwise.

When deprecation output is enabled, the first use of a formally deprecated LÖVE API will show a message at the bottom of the screen for a short time, and print the message to the console.

https://love2d.org/wiki/love.setDeprecationOutput"
  {})

(tset love :math {})
(fn love.math.gammaToLinear [r g b]
  "Converts a color from gamma-space (sRGB) to linear-space (RGB). This is useful when doing gamma-correct rendering and you need to do math in linear RGB in the few cases where LÖVE doesn't handle conversions automatically.

Read more about gamma-correct rendering here, here, and here.

In versions prior to 11.0, color component values were within the range of 0 to 255 instead of 0 to 1.

https://love2d.org/wiki/love.math.gammaToLinear"
  {})

(fn love.math.decompress [compressedData]
  "Decompresses a CompressedData or previously compressed string or Data object.

https://love2d.org/wiki/love.math.decompress"
  {})

(fn love.math.isConvex [vertices]
  "Checks whether a polygon is convex.

PolygonShapes in love.physics, some forms of Meshes, and polygons drawn with love.graphics.polygon must be simple convex polygons.

https://love2d.org/wiki/love.math.isConvex"
  {})

(fn love.math.getRandomState {}
  "Gets the current state of the random number generator. This returns an opaque implementation-dependent string which is only useful for later use with love.math.setRandomState or RandomGenerator:setState.

This is different from love.math.getRandomSeed in that getRandomState gets the random number generator's current state, whereas getRandomSeed gets the previously set seed number.

https://love2d.org/wiki/love.math.getRandomState"
  {})

(fn love.math.colorToBytes [r g b a]
  "Converts a color from 0..1 to 0..255 range.

https://love2d.org/wiki/love.math.colorToBytes"
  {})

(fn love.math.compress [rawstring format level]
  "Compresses a string or data using a specific compression algorithm.

https://love2d.org/wiki/love.math.compress"
  {})

(fn love.math.getRandomSeed {}
  "Gets the seed of the random number generator.

The seed is split into two numbers due to Lua's use of doubles for all number values - doubles can't accurately represent integer  values above 2^53, but the seed can be an integer value up to 2^64.

https://love2d.org/wiki/love.math.getRandomSeed"
  {})

(fn love.math.triangulate [polygon]
  "Decomposes a simple convex or concave polygon into triangles.

https://love2d.org/wiki/love.math.triangulate"
  {})

(fn love.math.newTransform {}
  "Creates a new Transform object.

https://love2d.org/wiki/love.math.newTransform"
  {})

(fn love.math.newBezierCurve [vertices]
  "Creates a new BezierCurve object.

The number of vertices in the control polygon determines the degree of the curve, e.g. three vertices define a quadratic (degree 2) Bézier curve, four vertices define a cubic (degree 3) Bézier curve, etc.

https://love2d.org/wiki/love.math.newBezierCurve"
  {})

(fn love.math.setRandomSeed [seed]
  "Sets the seed of the random number generator using the specified integer number. This is called internally at startup, so you generally don't need to call it yourself.

https://love2d.org/wiki/love.math.setRandomSeed"
  {})

(fn love.math.noise [x]
  "Generates a Simplex or Perlin noise value in 1-4 dimensions. The return value will always be the same, given the same arguments.

Simplex noise is closely related to Perlin noise. It is widely used for procedural content generation.

There are many webpages which discuss Perlin and Simplex noise in detail.

https://love2d.org/wiki/love.math.noise"
  {})

(fn love.math.colorFromBytes [rb gb bb ab]
  "Converts a color from 0..255 to 0..1 range.

https://love2d.org/wiki/love.math.colorFromBytes"
  {})

(fn love.math.randomNormal [stddev mean]
  "Get a normally distributed pseudo random number.

https://love2d.org/wiki/love.math.randomNormal"
  {})

(fn love.math.linearToGamma [lr lg lb]
  "Converts a color from linear-space (RGB) to gamma-space (sRGB). This is useful when storing linear RGB color values in an image, because the linear RGB color space has less precision than sRGB for dark colors, which can result in noticeable color banding when drawing.

In general, colors chosen based on what they look like on-screen are already in gamma-space and should not be double-converted. Colors calculated using math are often in the linear RGB space.

Read more about gamma-correct rendering here, here, and here.

In versions prior to 11.0, color component values were within the range of 0 to 255 instead of 0 to 1.

https://love2d.org/wiki/love.math.linearToGamma"
  {})

(fn love.math.setRandomState [state]
  "Sets the current state of the random number generator. The value used as an argument for this function is an opaque implementation-dependent string and should only originate from a previous call to love.math.getRandomState.

This is different from love.math.setRandomSeed in that setRandomState directly sets the random number generator's current implementation-dependent state, whereas setRandomSeed gives it a new seed value.

https://love2d.org/wiki/love.math.setRandomState"
  {})

(fn love.math.newRandomGenerator {}
  "Creates a new RandomGenerator object which is completely independent of other RandomGenerator objects and random functions.

https://love2d.org/wiki/love.math.newRandomGenerator"
  {})

(fn love.math.random {}
  "Generates a pseudo-random number in a platform independent manner. The default love.run seeds this function at startup, so you generally don't need to seed it yourself.

https://love2d.org/wiki/love.math.random"
  {})

(tset love :font {})
(fn love.font.newBMFontRasterizer [imageData glyphs dpiscale]
  "Creates a new BMFont Rasterizer.

https://love2d.org/wiki/love.font.newBMFontRasterizer"
  {})

(fn love.font.newImageRasterizer [imageData glyphs extraSpacing dpiscale]
  "Creates a new Image Rasterizer.

https://love2d.org/wiki/love.font.newImageRasterizer"
  {})

(fn love.font.newRasterizer [filename]
  "Creates a new Rasterizer.

https://love2d.org/wiki/love.font.newRasterizer"
  {})

(fn love.font.newTrueTypeRasterizer [size hinting dpiscale]
  "Creates a new TrueType Rasterizer.

https://love2d.org/wiki/love.font.newTrueTypeRasterizer"
  {})

(fn love.font.newGlyphData [rasterizer glyph]
  "Creates a new GlyphData.

https://love2d.org/wiki/love.font.newGlyphData"
  {})

(tset love :physics {})
(fn love.physics.newPrismaticJoint [body1 body2 x y ax ay collideConnected]
  "Creates a PrismaticJoint between two bodies.

A prismatic joint constrains two bodies to move relatively to each other on a specified axis. It does not allow for relative rotation. Its definition and operation are similar to a  revolute joint, but with translation and force substituted for angle and torque.

https://love2d.org/wiki/love.physics.newPrismaticJoint"
  {})

(fn love.physics.newPulleyJoint [body1
                                 body2
                                 gx1
                                 gy1
                                 gx2
                                 gy2
                                 x1
                                 y1
                                 x2
                                 y2
                                 ratio
                                 collideConnected]
  "Creates a PulleyJoint to join two bodies to each other and the ground.

The pulley joint simulates a pulley with an optional block and tackle. If the ratio parameter has a value different from one, then the simulated rope extends faster on one side than the other. In a pulley joint the total length of the simulated rope is the constant length1 + ratio * length2, which is set when the pulley joint is created.

Pulley joints can behave unpredictably if one side is fully extended. It is recommended that the method  setMaxLengths  be used to constrain the maximum lengths each side can attain.

https://love2d.org/wiki/love.physics.newPulleyJoint"
  {})

(fn love.physics.newCircleShape [radius]
  "Creates a new CircleShape.

https://love2d.org/wiki/love.physics.newCircleShape"
  {})

(fn love.physics.getMeter {}
  "Returns the meter scale factor.

All coordinates in the physics module are divided by this number, creating a convenient way to draw the objects directly to the screen without the need for graphics transformations.

It is recommended to create shapes no larger than 10 times the scale. This is important because Box2D is tuned to work well with shape sizes from 0.1 to 10 meters.

https://love2d.org/wiki/love.physics.getMeter"
  {})

(fn love.physics.newFrictionJoint [body1 body2 x y collideConnected]
  "Create a friction joint between two bodies. A FrictionJoint applies friction to a body.

https://love2d.org/wiki/love.physics.newFrictionJoint"
  {})

(fn love.physics.newGearJoint [joint1 joint2 ratio collideConnected]
  "Create a GearJoint connecting two Joints.

The gear joint connects two joints that must be either  prismatic or  revolute joints. Using this joint requires that the joints it uses connect their respective bodies to the ground and have the ground as the first body. When destroying the bodies and joints you must make sure you destroy the gear joint before the other joints.

The gear joint has a ratio the determines how the angular or distance values of the connected joints relate to each other. The formula coordinate1 + ratio * coordinate2 always has a constant value that is set when the gear joint is created.

https://love2d.org/wiki/love.physics.newGearJoint"
  {})

(fn love.physics.newRectangleShape [width height]
  "Shorthand for creating rectangular PolygonShapes.

By default, the local origin is located at the '''center''' of the rectangle as opposed to the top left for graphics.

https://love2d.org/wiki/love.physics.newRectangleShape"
  {})

(fn love.physics.newWorld [xg yg sleep]
  "Creates a new World.

https://love2d.org/wiki/love.physics.newWorld"
  {})

(fn love.physics.setMeter [scale]
  "Sets the pixels to meter scale factor.

All coordinates in the physics module are divided by this number and converted to meters, and it creates a convenient way to draw the objects directly to the screen without the need for graphics transformations.

It is recommended to create shapes no larger than 10 times the scale. This is important because Box2D is tuned to work well with shape sizes from 0.1 to 10 meters. The default meter scale is 30.

https://love2d.org/wiki/love.physics.setMeter"
  {})

(fn love.physics.newMotorJoint [body1 body2 correctionFactor]
  "Creates a joint between two bodies which controls the relative motion between them.

Position and rotation offsets can be specified once the MotorJoint has been created, as well as the maximum motor force and torque that will be be applied to reach the target offsets.

https://love2d.org/wiki/love.physics.newMotorJoint"
  {})

(fn love.physics.newWeldJoint [body1 body2 x y collideConnected]
  "Creates a constraint joint between two bodies. A WeldJoint essentially glues two bodies together. The constraint is a bit soft, however, due to Box2D's iterative solver.

https://love2d.org/wiki/love.physics.newWeldJoint"
  {})

(fn love.physics.newRopeJoint [body1
                               body2
                               x1
                               y1
                               x2
                               y2
                               maxLength
                               collideConnected]
  "Creates a joint between two bodies. Its only function is enforcing a max distance between these bodies.

https://love2d.org/wiki/love.physics.newRopeJoint"
  {})

(fn love.physics.newMouseJoint [body x y]
  "Create a joint between a body and the mouse.

This joint actually connects the body to a fixed point in the world. To make it follow the mouse, the fixed point must be updated every timestep (example below).

The advantage of using a MouseJoint instead of just changing a body position directly is that collisions and reactions to other joints are handled by the physics engine.

https://love2d.org/wiki/love.physics.newMouseJoint"
  {})

(fn love.physics.newRevoluteJoint [body1 body2 x y collideConnected]
  "Creates a pivot joint between two bodies.

This joint connects two bodies to a point around which they can pivot.

https://love2d.org/wiki/love.physics.newRevoluteJoint"
  {})

(fn love.physics.newPolygonShape [x1 y1 x2 y2 x3 y3 ...]
  "Creates a new PolygonShape.

This shape can have 8 vertices at most, and must form a convex shape.

https://love2d.org/wiki/love.physics.newPolygonShape"
  {})

(fn love.physics.newChainShape [loop x1 y1 x2 y2 ...]
  "Creates a new ChainShape.

https://love2d.org/wiki/love.physics.newChainShape"
  {})

(fn love.physics.getDistance [fixture1 fixture2]
  "Returns the two closest points between two fixtures and their distance.

https://love2d.org/wiki/love.physics.getDistance"
  {})

(fn love.physics.newFixture [body shape density]
  "Creates and attaches a Fixture to a body.

Note that the Shape object is copied rather than kept as a reference when the Fixture is created. To get the Shape object that the Fixture owns, use Fixture:getShape.

https://love2d.org/wiki/love.physics.newFixture"
  {})

(fn love.physics.newEdgeShape [x1 y1 x2 y2]
  "Creates a new EdgeShape.

https://love2d.org/wiki/love.physics.newEdgeShape"
  {})

(fn love.physics.newBody [world x y type]
  "Creates a new body.

There are three types of bodies.

* Static bodies do not move, have a infinite mass, and can be used for level boundaries.

* Dynamic bodies are the main actors in the simulation, they collide with everything.

* Kinematic bodies do not react to forces and only collide with dynamic bodies.

The mass of the body gets calculated when a Fixture is attached or removed, but can be changed at any time with Body:setMass or Body:resetMassData.

https://love2d.org/wiki/love.physics.newBody"
  {})

(fn love.physics.newWheelJoint [body1 body2 x y ax ay collideConnected]
  "Creates a wheel joint.

https://love2d.org/wiki/love.physics.newWheelJoint"
  {})

(fn love.physics.newDistanceJoint [body1 body2 x1 y1 x2 y2 collideConnected]
  "Creates a DistanceJoint between two bodies.

This joint constrains the distance between two points on two bodies to be constant. These two points are specified in world coordinates and the two bodies are assumed to be in place when this joint is created. The first anchor point is connected to the first body and the second to the second body, and the points define the length of the distance joint.

https://love2d.org/wiki/love.physics.newDistanceJoint"
  {})

(tset love :image {})
(fn love.image.isCompressed [filename]
  "Determines whether a file can be loaded as CompressedImageData.

https://love2d.org/wiki/love.image.isCompressed"
  {})

(fn love.image.newImageData [width height]
  "Creates a new ImageData object.

https://love2d.org/wiki/love.image.newImageData"
  {})

(fn love.image.newCompressedData [filename]
  "Create a new CompressedImageData object from a compressed image file. LÖVE supports several compressed texture formats, enumerated in the CompressedImageFormat page.

https://love2d.org/wiki/love.image.newCompressedData"
  {})

(tset love :data {})
(fn love.data.compress [container format rawstring level]
  "Compresses a string or data using a specific compression algorithm.

https://love2d.org/wiki/love.data.compress"
  {})

(fn love.data.getPackedSize [format]
  "Gets the size in bytes that a given format used with love.data.pack will use.

This function behaves the same as Lua 5.3's string.packsize.

https://love2d.org/wiki/love.data.getPackedSize"
  {})

(fn love.data.decode [container format sourceString]
  "Decode Data or a string from any of the EncodeFormats to Data or string.

https://love2d.org/wiki/love.data.decode"
  {})

(fn love.data.newDataView [data offset size]
  "Creates a new Data referencing a subsection of an existing Data object.

https://love2d.org/wiki/love.data.newDataView"
  {})

(fn love.data.newByteData [datastring]
  "Creates a new Data object containing arbitrary bytes.

Data:getPointer along with LuaJIT's FFI can be used to manipulate the contents of the ByteData object after it has been created.

https://love2d.org/wiki/love.data.newByteData"
  {})

(fn love.data.unpack [format datastring pos]
  "Unpacks (deserializes) a byte-string or Data into simple Lua values.

This function behaves the same as Lua 5.3's string.unpack.

https://love2d.org/wiki/love.data.unpack"
  {})

(fn love.data.pack [container format v1 ...]
  "Packs (serializes) simple Lua values.

This function behaves the same as Lua 5.3's string.pack.

https://love2d.org/wiki/love.data.pack"
  {})

(fn love.data.encode [container format sourceString line_length]
  "Encode Data or a string to a Data or string in one of the EncodeFormats.

https://love2d.org/wiki/love.data.encode"
  {})

(fn love.data.decompress [container compressedData]
  "Decompresses a CompressedData or previously compressed string or Data object.

https://love2d.org/wiki/love.data.decompress"
  {})

(fn love.data.hash [hashFunction string]
  "Compute the message digest of a string using a specified hash algorithm.

https://love2d.org/wiki/love.data.hash"
  {})

(tset love :timer {})
(fn love.timer.getAverageDelta {}
  "Returns the average delta time (seconds per frame) over the last second.

https://love2d.org/wiki/love.timer.getAverageDelta"
  {})

(fn love.timer.getFPS {}
  "Returns the current frames per second.

https://love2d.org/wiki/love.timer.getFPS"
  {})

(fn love.timer.getDelta {}
  "Returns the time between the last two frames.

https://love2d.org/wiki/love.timer.getDelta"
  {})

(fn love.timer.getTime {}
  "Returns the value of a timer with an unspecified starting time.

This function should only be used to calculate differences between points in time, as the starting time of the timer is unknown.

https://love2d.org/wiki/love.timer.getTime"
  {})

(fn love.timer.sleep [s]
  "Pauses the current thread for the specified amount of time.

https://love2d.org/wiki/love.timer.sleep"
  {})

(fn love.timer.step {}
  "Measures the time between two frames.

Calling this changes the return value of love.timer.getDelta.

https://love2d.org/wiki/love.timer.step"
  {})

(tset love :filesystem {})
(fn love.filesystem.setSource [path]
  "Sets the source of the game, where the code is present. This function can only be called once, and is normally automatically done by LÖVE.

https://love2d.org/wiki/love.filesystem.setSource"
  {})

(fn love.filesystem.getInfo [path filtertype]
  "Gets information about the specified file or directory.

https://love2d.org/wiki/love.filesystem.getInfo"
  {})

(fn love.filesystem.areSymlinksEnabled {}
  "Gets whether love.filesystem follows symbolic links.

https://love2d.org/wiki/love.filesystem.areSymlinksEnabled"
  {})

(fn love.filesystem.lines [name]
  "Iterate over the lines in a file.

https://love2d.org/wiki/love.filesystem.lines"
  {})

(fn love.filesystem.createDirectory [name]
  "Recursively creates a directory.

When called with 'a/b' it creates both 'a' and 'a/b', if they don't exist already.

https://love2d.org/wiki/love.filesystem.createDirectory"
  {})

(fn love.filesystem.write [name data size]
  "Write data to a file in the save directory. If the file existed already, it will be completely replaced by the new contents.

https://love2d.org/wiki/love.filesystem.write"
  {})

(fn love.filesystem.read [name size]
  "Read the contents of a file.

https://love2d.org/wiki/love.filesystem.read"
  {})

(fn love.filesystem.unmount [archive]
  "Unmounts a zip file or folder previously mounted for reading with love.filesystem.mount.

https://love2d.org/wiki/love.filesystem.unmount"
  {})

(fn love.filesystem.getIdentity {}
  "Gets the write directory name for your game.

Note that this only returns the name of the folder to store your files in, not the full path.

https://love2d.org/wiki/love.filesystem.getIdentity"
  {})

(fn love.filesystem.getWorkingDirectory {}
  "Gets the current working directory.

https://love2d.org/wiki/love.filesystem.getWorkingDirectory"
  {})

(fn love.filesystem.newFileData [contents name]
  "Creates a new FileData object from a file on disk, or from a string in memory.

https://love2d.org/wiki/love.filesystem.newFileData"
  {})

(fn love.filesystem.setSymlinksEnabled [enable]
  "Sets whether love.filesystem follows symbolic links. It is enabled by default in version 0.10.0 and newer, and disabled by default in 0.9.2.

https://love2d.org/wiki/love.filesystem.setSymlinksEnabled"
  {})

(fn love.filesystem.remove [name]
  "Removes a file or empty directory.

https://love2d.org/wiki/love.filesystem.remove"
  {})

(fn love.filesystem.getDirectoryItems [dir]
  "Returns a table with the names of files and subdirectories in the specified path. The table is not sorted in any way; the order is undefined.

If the path passed to the function exists in the game and the save directory, it will list the files and directories from both places.

https://love2d.org/wiki/love.filesystem.getDirectoryItems"
  {})

(fn love.filesystem.getSourceBaseDirectory {}
  "Returns the full path to the directory containing the .love file. If the game is fused to the LÖVE executable, then the directory containing the executable is returned.

If love.filesystem.isFused is true, the path returned by this function can be passed to love.filesystem.mount, which will make the directory containing the main game (e.g. C:/Program Files/coolgame/) readable by love.filesystem.

https://love2d.org/wiki/love.filesystem.getSourceBaseDirectory"
  {})

(fn love.filesystem.init [appname]
  "Initializes love.filesystem, will be called internally, so should not be used explicitly.

https://love2d.org/wiki/love.filesystem.init"
  {})

(fn love.filesystem.getAppdataDirectory {}
  "Returns the application data directory (could be the same as getUserDirectory)

https://love2d.org/wiki/love.filesystem.getAppdataDirectory"
  {})

(fn love.filesystem.load [name]
  "Loads a Lua file (but does not run it).

https://love2d.org/wiki/love.filesystem.load"
  {})

(fn love.filesystem.setRequirePath [paths]
  "Sets the filesystem paths that will be searched when require is called.

The paths string given to this function is a sequence of path templates separated by semicolons. The argument passed to ''require'' will be inserted in place of any question mark ('?') character in each template (after the dot characters in the argument passed to ''require'' are replaced by directory separators.)

The paths are relative to the game's source and save directories, as well as any paths mounted with love.filesystem.mount.

https://love2d.org/wiki/love.filesystem.setRequirePath"
  {})

(fn love.filesystem.getSource {}
  "Returns the full path to the the .love file or directory. If the game is fused to the LÖVE executable, then the executable is returned.

https://love2d.org/wiki/love.filesystem.getSource"
  {})

(fn love.filesystem.getUserDirectory {}
  "Returns the path of the user's directory

https://love2d.org/wiki/love.filesystem.getUserDirectory"
  {})

(fn love.filesystem.getCRequirePath {}
  "Gets the filesystem paths that will be searched for c libraries when require is called.

The paths string returned by this function is a sequence of path templates separated by semicolons. The argument passed to ''require'' will be inserted in place of any question mark ('?') character in each template (after the dot characters in the argument passed to ''require'' are replaced by directory separators.) Additionally, any occurrence of a double question mark ('??') will be replaced by the name passed to require and the default library extension for the platform.

The paths are relative to the game's source and save directories, as well as any paths mounted with love.filesystem.mount.

https://love2d.org/wiki/love.filesystem.getCRequirePath"
  {})

(fn love.filesystem.getSaveDirectory {}
  "Gets the full path to the designated save directory.

This can be useful if you want to use the standard io library (or something else) to

read or write in the save directory.

https://love2d.org/wiki/love.filesystem.getSaveDirectory"
  {})

(fn love.filesystem.mount [archive mountpoint appendToPath]
  "Mounts a zip file or folder in the game's save directory for reading.

It is also possible to mount love.filesystem.getSourceBaseDirectory if the game is in fused mode.

https://love2d.org/wiki/love.filesystem.mount"
  {})

(fn love.filesystem.setCRequirePath [paths]
  "Sets the filesystem paths that will be searched for c libraries when require is called.

The paths string returned by this function is a sequence of path templates separated by semicolons. The argument passed to ''require'' will be inserted in place of any question mark ('?') character in each template (after the dot characters in the argument passed to ''require'' are replaced by directory separators.) Additionally, any occurrence of a double question mark ('??') will be replaced by the name passed to require and the default library extension for the platform.

The paths are relative to the game's source and save directories, as well as any paths mounted with love.filesystem.mount.

https://love2d.org/wiki/love.filesystem.setCRequirePath"
  {})

(fn love.filesystem.newFile [filename]
  "Creates a new File object.

It needs to be opened before it can be accessed.

https://love2d.org/wiki/love.filesystem.newFile"
  {})

(fn love.filesystem.getRealDirectory [filepath]
  "Gets the platform-specific absolute path of the directory containing a filepath.

This can be used to determine whether a file is inside the save directory or the game's source .love.

https://love2d.org/wiki/love.filesystem.getRealDirectory"
  {})

(fn love.filesystem.isFused {}
  "Gets whether the game is in fused mode or not.

If a game is in fused mode, its save directory will be directly in the Appdata directory instead of Appdata/LOVE/. The game will also be able to load C Lua dynamic libraries which are located in the save directory.

A game is in fused mode if the source .love has been fused to the executable (see Game Distribution), or if '--fused' has been given as a command-line argument when starting the game.

https://love2d.org/wiki/love.filesystem.isFused"
  {})

(fn love.filesystem.setIdentity [name]
  "Sets the write directory for your game.

Note that you can only set the name of the folder to store your files in, not the location.

https://love2d.org/wiki/love.filesystem.setIdentity"
  {})

(fn love.filesystem.getRequirePath {}
  "Gets the filesystem paths that will be searched when require is called.

The paths string returned by this function is a sequence of path templates separated by semicolons. The argument passed to ''require'' will be inserted in place of any question mark ('?') character in each template (after the dot characters in the argument passed to ''require'' are replaced by directory separators.)

The paths are relative to the game's source and save directories, as well as any paths mounted with love.filesystem.mount.

https://love2d.org/wiki/love.filesystem.getRequirePath"
  {})

(fn love.filesystem.append [name data size]
  "Append data to an existing file.

https://love2d.org/wiki/love.filesystem.append"
  {})

(tset love :joystick {})
(fn love.joystick.getJoystickCount {}
  "Gets the number of connected joysticks.

https://love2d.org/wiki/love.joystick.getJoystickCount"
  {})

(fn love.joystick.getGamepadMappingString [guid]
  "Gets the full gamepad mapping string of the Joysticks which have the given GUID, or nil if the GUID isn't recognized as a gamepad.

The mapping string contains binding information used to map the Joystick's buttons an axes to the standard gamepad layout, and can be used later with love.joystick.loadGamepadMappings.

https://love2d.org/wiki/love.joystick.getGamepadMappingString"
  {})

(fn love.joystick.loadGamepadMappings [filename]
  "Loads a gamepad mappings string or file created with love.joystick.saveGamepadMappings.

It also recognizes any SDL gamecontroller mapping string, such as those created with Steam's Big Picture controller configure interface, or this nice database. If a new mapping is loaded for an already known controller GUID, the later version will overwrite the one currently loaded.

https://love2d.org/wiki/love.joystick.loadGamepadMappings"
  {})

(fn love.joystick.setGamepadMapping [guid button inputtype inputindex hatdir]
  "Binds a virtual gamepad input to a button, axis or hat for all Joysticks of a certain type. For example, if this function is used with a GUID returned by a Dualshock 3 controller in OS X, the binding will affect Joystick:getGamepadAxis and Joystick:isGamepadDown for ''all'' Dualshock 3 controllers used with the game when run in OS X.

LÖVE includes built-in gamepad bindings for many common controllers. This function lets you change the bindings or add new ones for types of Joysticks which aren't recognized as gamepads by default.

The virtual gamepad buttons and axes are designed around the Xbox 360 controller layout.

https://love2d.org/wiki/love.joystick.setGamepadMapping"
  {})

(fn love.joystick.saveGamepadMappings [filename]
  "Saves the virtual gamepad mappings of all recognized as gamepads and have either been recently used or their gamepad bindings have been modified.

The mappings are stored as a string for use with love.joystick.loadGamepadMappings.

https://love2d.org/wiki/love.joystick.saveGamepadMappings"
  {})

(fn love.joystick.getJoysticks {}
  "Gets a list of connected Joysticks.

https://love2d.org/wiki/love.joystick.getJoysticks"
  {})

(tset love :graphics {})
(fn love.graphics.getPixelHeight {}
  "Gets the height in pixels of the window.

The graphics coordinate system and DPI scale factor, rather than raw pixels. Use getHeight for calculations related to drawing to the screen and using the coordinate system (calculating the center of the screen, for example), and getPixelHeight only when dealing specifically with underlying pixels (pixel-related calculations in a pixel Shader, for example).

https://love2d.org/wiki/love.graphics.getPixelHeight"
  {})

(fn love.graphics.setLineStyle [style]
  "Sets the line style.

https://love2d.org/wiki/love.graphics.setLineStyle"
  {})

(fn love.graphics.getStencilTest {}
  "Gets the current stencil test configuration.

When stencil testing is enabled, the geometry of everything that is drawn afterward will be clipped / stencilled out based on a comparison between the arguments of this function and the stencil value of each pixel that the geometry touches. The stencil values of pixels are affected via love.graphics.stencil.

Each Canvas has its own per-pixel stencil values.

https://love2d.org/wiki/love.graphics.getStencilTest"
  {})

(fn love.graphics.getPixelDimenions {}
  "Gets the width and height in pixels of the window.

love.graphics.getDimensions gets the dimensions of the window in units scaled by the screen's DPI scale factor, rather than pixels. Use getDimensions for calculations related to drawing to the screen and using the graphics coordinate system (calculating the center of the screen, for example), and getPixelDimensions only when dealing specifically with underlying pixels (pixel-related calculations in a pixel Shader, for example).

https://love2d.org/wiki/love.graphics.getPixelDimenions"
  {})

(fn love.graphics.getSupported {}
  "Gets the optional graphics features and whether they're supported on the system.

Some older or low-end systems don't always support all graphics features.

https://love2d.org/wiki/love.graphics.getSupported"
  {})

(fn love.graphics.intersectScissor [x y width height]
  "Sets the scissor to the rectangle created by the intersection of the specified rectangle with the existing scissor.  If no scissor is active yet, it behaves like love.graphics.setScissor.

The scissor limits the drawing area to a specified rectangle. This affects all graphics calls, including love.graphics.clear.

The dimensions of the scissor is unaffected by graphical transformations (translate, scale, ...).

https://love2d.org/wiki/love.graphics.intersectScissor"
  {})

(fn love.graphics.newText [font textstring]
  "Creates a new drawable Text object.

https://love2d.org/wiki/love.graphics.newText"
  {})

(fn love.graphics.getImageFormats {}
  "Gets the raw and compressed pixel formats usable for Images, and whether each is supported.

https://love2d.org/wiki/love.graphics.getImageFormats"
  {})

(fn love.graphics.getCanvas {}
  "Gets the current target Canvas.

https://love2d.org/wiki/love.graphics.getCanvas"
  {})

(fn love.graphics.newCubeImage [filename settings]
  "Creates a new cubemap Image.

Cubemap images have 6 faces (sides) which represent a cube. They can't be rendered directly, they can only be used in Shader code (and sent to the shader via Shader:send).

To use a cubemap image in a Shader, it must be declared as a CubeImage or samplerCube type (instead of Image or sampler2D). The Texel(CubeImage image, vec3 direction) shader function must be used to get pixel colors from the cubemap. The vec3 argument is a normalized direction from the center of the cube, rather than explicit texture coordinates.

Each face in a cubemap image must have square dimensions.

For variants of this function which accept a single image containing multiple cubemap faces, they must be laid out in one of the following forms in the image:

   +y

+z +x -z

   -y

   -x

or:

   +y

-x +z +x -z

   -y

or:

+x

-x

+y

-y

+z

-z

or:

+x -x +y -y +z -z

https://love2d.org/wiki/love.graphics.newCubeImage"
  {})

(fn love.graphics.newFont [filename]
  "Creates a new Font from a TrueType Font or BMFont file. Created fonts are not cached, in that calling this function with the same arguments will always create a new Font object.

All variants which accept a filename can also accept a Data object instead.

https://love2d.org/wiki/love.graphics.newFont"
  {})

(fn love.graphics.getLineStyle {}
  "Gets the line style.

https://love2d.org/wiki/love.graphics.getLineStyle"
  {})

(fn love.graphics.line [x1 y1 x2 y2 ...]
  "Draws lines between points.

https://love2d.org/wiki/love.graphics.line"
  {})

(fn love.graphics.isGammaCorrect {}
  "Gets whether gamma-correct rendering is supported and enabled. It can be enabled by setting t.gammacorrect = true in love.conf.

Not all devices support gamma-correct rendering, in which case it will be automatically disabled and this function will return false. It is supported on desktop systems which have graphics cards that are capable of using OpenGL 3 / DirectX 10, and iOS devices that can use OpenGL ES 3.

https://love2d.org/wiki/love.graphics.isGammaCorrect"
  {})

(fn love.graphics.setBackgroundColor [red green blue alpha]
  "Sets the background color.

https://love2d.org/wiki/love.graphics.setBackgroundColor"
  {})

(fn love.graphics.getShader {}
  "Gets the current Shader. Returns nil if none is set.

https://love2d.org/wiki/love.graphics.getShader"
  {})

(fn love.graphics.translate [dx dy]
  "Translates the coordinate system in two dimensions.

When this function is called with two numbers, dx, and dy, all the following drawing operations take effect as if their x and y coordinates were x+dx and y+dy.

Scale and translate are not commutative operations, therefore, calling them in different orders will change the outcome.

This change lasts until love.draw() exits or else a love.graphics.pop reverts to a previous love.graphics.push.

Translating using whole numbers will prevent tearing/blurring of images and fonts draw after translating.

https://love2d.org/wiki/love.graphics.translate"
  {})

(fn love.graphics.setShader [shader]
  "Sets or resets a Shader as the current pixel effect or vertex shaders. All drawing operations until the next ''love.graphics.setShader'' will be drawn using the Shader object specified.

https://love2d.org/wiki/love.graphics.setShader"
  {})

(fn love.graphics.setMeshCullMode [mode]
  "Sets whether back-facing triangles in a Mesh are culled.

This is designed for use with low level custom hardware-accelerated 3D rendering via custom vertex attributes on Meshes, custom vertex shaders, and depth testing with a depth buffer.

By default, both front- and back-facing triangles in Meshes are rendered.

https://love2d.org/wiki/love.graphics.setMeshCullMode"
  {})

(fn love.graphics.setColorMask [red green blue alpha]
  "Sets the color mask. Enables or disables specific color components when rendering and clearing the screen. For example, if '''red''' is set to '''false''', no further changes will be made to the red component of any pixels.

https://love2d.org/wiki/love.graphics.setColorMask"
  {})

(fn love.graphics.newSpriteBatch [image maxsprites]
  "Creates a new SpriteBatch object.

https://love2d.org/wiki/love.graphics.newSpriteBatch"
  {})

(fn love.graphics.newParticleSystem [image buffer]
  "Creates a new ParticleSystem.

https://love2d.org/wiki/love.graphics.newParticleSystem"
  {})

(fn love.graphics.getMeshCullMode {}
  "Gets whether back-facing triangles in a Mesh are culled.

Mesh face culling is designed for use with low level custom hardware-accelerated 3D rendering via custom vertex attributes on Meshes, custom vertex shaders, and depth testing with a depth buffer.

https://love2d.org/wiki/love.graphics.getMeshCullMode"
  {})

(fn love.graphics.getStackDepth {}
  "Gets the current depth of the transform / state stack (the number of pushes without corresponding pops).

https://love2d.org/wiki/love.graphics.getStackDepth"
  {})

(fn love.graphics.newArrayImage [slices settings]
  "Creates a new array Image.

An array image / array texture is a single object which contains multiple 'layers' or 'slices' of 2D sub-images. It can be thought of similarly to a texture atlas or sprite sheet, but it doesn't suffer from the same tile / quad bleeding artifacts that texture atlases do – although every sub-image must have the same dimensions.

A specific layer of an array image can be drawn with love.graphics.drawLayer / SpriteBatch:addLayer, or with the Quad variant of love.graphics.draw and Quad:setLayer, or via a custom Shader.

To use an array image in a Shader, it must be declared as a ArrayImage or sampler2DArray type (instead of Image or sampler2D). The Texel(ArrayImage image, vec3 texturecoord) shader function must be used to get pixel colors from a slice of the array image. The vec3 argument contains the texture coordinate in the first two components, and the 0-based slice index in the third component.

https://love2d.org/wiki/love.graphics.newArrayImage"
  {})

(fn love.graphics.getWidth {}
  "Gets the width in pixels of the window.

https://love2d.org/wiki/love.graphics.getWidth"
  {})

(fn love.graphics.clear {}
  "Clears the screen or active Canvas to the specified color.

This function is called automatically before love.draw in the default love.run function. See the example in love.run for a typical use of this function.

Note that the scissor area bounds the cleared region.

In versions prior to 11.0, color component values were within the range of 0 to 255 instead of 0 to 1.

In versions prior to background color instead.

https://love2d.org/wiki/love.graphics.clear"
  {})

(fn love.graphics.circle [mode x y radius]
  "Draws a circle.

https://love2d.org/wiki/love.graphics.circle"
  {})

(fn love.graphics.newVideo [filename]
  "Creates a new drawable Video. Currently only Ogg Theora video files are supported.

https://love2d.org/wiki/love.graphics.newVideo"
  {})

(fn love.graphics.drawLayer [texture layerindex x y r sx sy ox oy kx ky]
  "Draws a layer of an Array Texture.

https://love2d.org/wiki/love.graphics.drawLayer"
  {})

(fn love.graphics.getDimensions {}
  "Gets the width and height in pixels of the window.

https://love2d.org/wiki/love.graphics.getDimensions"
  {})

(fn love.graphics.ellipse [mode x y radiusx radiusy]
  "Draws an ellipse.

https://love2d.org/wiki/love.graphics.ellipse"
  {})

(fn love.graphics.validateShader [gles code]
  "Validates shader code. Check if specified shader code does not contain any errors.

https://love2d.org/wiki/love.graphics.validateShader"
  {})

(fn love.graphics.flushBatch {}
  "Immediately renders any pending automatically batched draws.

LÖVE will call this function internally as needed when most state is changed, so it is not necessary to manually call it.

The current batch will be automatically flushed by love.graphics state changes (except for the transform stack and the current color), as well as Shader:send and methods on Textures which change their state. Using a different Image in consecutive love.graphics.draw calls will also flush the current batch.

SpriteBatches, ParticleSystems, Meshes, and Text objects do their own batching and do not affect automatic batching of other draws, aside from flushing the current batch when they're drawn.

https://love2d.org/wiki/love.graphics.flushBatch"
  {})

(fn love.graphics.getBackgroundColor {}
  "Gets the current background color.

In versions prior to 11.0, color component values were within the range of 0 to 255 instead of 0 to 1.

https://love2d.org/wiki/love.graphics.getBackgroundColor"
  {})

(fn love.graphics.getRendererInfo {}
  "Gets information about the system's video card and drivers.

https://love2d.org/wiki/love.graphics.getRendererInfo"
  {})

(fn love.graphics.inverseTransformPoint [screenX screenY]
  "Converts the given 2D position from screen-space into global coordinates.

This effectively applies the reverse of the current graphics transformations to the given position. A similar Transform:inverseTransformPoint method exists for Transform objects.

https://love2d.org/wiki/love.graphics.inverseTransformPoint"
  {})

(fn love.graphics.stencil [stencilfunction action value keepvalues]
  "Draws geometry as a stencil.

The geometry drawn by the supplied function sets invisible stencil values of pixels, instead of setting pixel colors. The stencil buffer (which contains those stencil values) can act like a mask / stencil - love.graphics.setStencilTest can be used afterward to determine how further rendering is affected by the stencil values in each pixel.

Stencil values are integers within the range of 255.

https://love2d.org/wiki/love.graphics.stencil"
  {})

(fn love.graphics.shear [kx ky]
  "Shears the coordinate system.

https://love2d.org/wiki/love.graphics.shear"
  {})

(fn love.graphics.getDPIScale {}
  "Gets the DPI scale factor of the window.

The DPI scale factor represents relative pixel density. The pixel density inside the window might be greater (or smaller) than the 'size' of the window. For example on a retina screen in Mac OS X with the highdpi window flag enabled, the window may take up the same physical size as an 800x600 window, but the area inside the window uses 1600x1200 pixels. love.graphics.getDPIScale() would return 2 in that case.

The love.window.fromPixels and love.window.toPixels functions can also be used to convert between units.

The highdpi window flag must be enabled to use the full pixel density of a Retina screen on Mac OS X and iOS. The flag currently does nothing on Windows and Linux, and on Android it is effectively always enabled.

https://love2d.org/wiki/love.graphics.getDPIScale"
  {})

(fn love.graphics.getLineJoin {}
  "Gets the line join style.

https://love2d.org/wiki/love.graphics.getLineJoin"
  {})

(fn love.graphics.getBlendMode {}
  "Gets the blending mode.

https://love2d.org/wiki/love.graphics.getBlendMode"
  {})

(fn love.graphics.setWireframe [enable]
  "Sets whether wireframe lines will be used when drawing.

https://love2d.org/wiki/love.graphics.setWireframe"
  {})

(fn love.graphics.setStencilTest [comparemode comparevalue]
  "Configures or disables stencil testing.

When stencil testing is enabled, the geometry of everything that is drawn afterward will be clipped / stencilled out based on a comparison between the arguments of this function and the stencil value of each pixel that the geometry touches. The stencil values of pixels are affected via love.graphics.stencil.

https://love2d.org/wiki/love.graphics.setStencilTest"
  {})

(fn love.graphics.discard [discardcolor discardstencil]
  "Discards (trashes) the contents of the screen or active Canvas. This is a performance optimization function with niche use cases.

If the active Canvas has just been changed and the 'replace' BlendMode is about to be used to draw something which covers the entire screen, calling love.graphics.discard rather than calling love.graphics.clear or doing nothing may improve performance on mobile devices.

On some desktop systems this function may do nothing.

https://love2d.org/wiki/love.graphics.discard"
  {})

(fn love.graphics.setPointSize [size]
  "Sets the point size.

https://love2d.org/wiki/love.graphics.setPointSize"
  {})

(fn love.graphics.setScissor [x y width height]
  "Sets or disables scissor.

The scissor limits the drawing area to a specified rectangle. This affects all graphics calls, including love.graphics.clear.

The dimensions of the scissor is unaffected by graphical transformations (translate, scale, ...).

https://love2d.org/wiki/love.graphics.setScissor"
  {})

(fn love.graphics.newVolumeImage [layers settings]
  "Creates a new volume (3D) Image.

Volume images are 3D textures with width, height, and depth. They can't be rendered directly, they can only be used in Shader code (and sent to the shader via Shader:send).

To use a volume image in a Shader, it must be declared as a VolumeImage or sampler3D type (instead of Image or sampler2D). The Texel(VolumeImage image, vec3 texcoords) shader function must be used to get pixel colors from the volume image. The vec3 argument is a normalized texture coordinate with the z component representing the depth to sample at (ranging from 1).

Volume images are typically used as lookup tables in shaders for color grading, for example, because sampling using a texture coordinate that is partway in between two pixels can interpolate across all 3 dimensions in the volume image, resulting in a smooth gradient even when a small-sized volume image is used as the lookup table.

Array images are a much better choice than volume images for storing multiple different sprites in a single array image for directly drawing them.

https://love2d.org/wiki/love.graphics.newVolumeImage"
  {})

(fn love.graphics.isActive {}
  "Gets whether the graphics module is able to be used. If it is not active, love.graphics function and method calls will not work correctly and may cause the program to crash.
The graphics module is inactive if a window is not open, or if the app is in the background on iOS. Typically the app's execution will be automatically paused by the system, in the latter case.

https://love2d.org/wiki/love.graphics.isActive"
  {})

(fn love.graphics.getColor {}
  "Gets the current color.

In versions prior to 11.0, color component values were within the range of 0 to 255 instead of 0 to 1.

https://love2d.org/wiki/love.graphics.getColor"
  {})

(fn love.graphics.setNewFont [size]
  "Creates and sets a new Font.

https://love2d.org/wiki/love.graphics.setNewFont"
  {})

(fn love.graphics.setLineWidth [width]
  "Sets the line width.

https://love2d.org/wiki/love.graphics.setLineWidth"
  {})

(fn love.graphics.getHeight {}
  "Gets the height in pixels of the window.

https://love2d.org/wiki/love.graphics.getHeight"
  {})

(fn love.graphics.setDefaultFilter [min mag anisotropy]
  "Sets the default scaling filters used with Images, Canvases, and Fonts.

https://love2d.org/wiki/love.graphics.setDefaultFilter"
  {})

(fn love.graphics.scale [sx sy]
  "Scales the coordinate system in two dimensions.

By default the coordinate system in LÖVE corresponds to the display pixels in horizontal and vertical directions one-to-one, and the x-axis increases towards the right while the y-axis increases downwards. Scaling the coordinate system changes this relation.

After scaling by sx and sy, all coordinates are treated as if they were multiplied by sx and sy. Every result of a drawing operation is also correspondingly scaled, so scaling by (2, 2) for example would mean making everything twice as large in both x- and y-directions. Scaling by a negative value flips the coordinate system in the corresponding direction, which also means everything will be drawn flipped or upside down, or both. Scaling by zero is not a useful operation.

Scale and translate are not commutative operations, therefore, calling them in different orders will change the outcome.

Scaling lasts until love.draw() exits.

https://love2d.org/wiki/love.graphics.scale"
  {})

(fn love.graphics.present {}
  "Displays the results of drawing operations on the screen.

This function is used when writing your own love.run function. It presents all the results of your drawing operations on the screen. See the example in love.run for a typical use of this function.

https://love2d.org/wiki/love.graphics.present"
  {})

(fn love.graphics.newMesh [vertices mode usage]
  "Creates a new Mesh.

Use Mesh:setTexture if the Mesh should be textured with an Image or Canvas when it's drawn.

In versions prior to 11.0, color and byte component values were within the range of 0 to 255 instead of 0 to 1.

https://love2d.org/wiki/love.graphics.newMesh"
  {})

(fn love.graphics.reset {}
  "Resets the current graphics settings.

Calling reset makes the current drawing color white, the current background color black, disables any active color component masks, disables wireframe mode and resets the current graphics transformation to the origin. It also sets both the point and line drawing modes to smooth and their sizes to 1.0.

https://love2d.org/wiki/love.graphics.reset"
  {})

(fn love.graphics.pop {}
  "Pops the current coordinate transformation from the transformation stack.

This function is always used to reverse a previous push operation. It returns the current transformation state to what it was before the last preceding push.

https://love2d.org/wiki/love.graphics.pop"
  {})

(fn love.graphics.rotate [angle]
  "Rotates the coordinate system in two dimensions.

Calling this function affects all future drawing operations by rotating the coordinate system around the origin by the given amount of radians. This change lasts until love.draw() exits.

https://love2d.org/wiki/love.graphics.rotate"
  {})

(fn love.graphics.setLineJoin [join]
  "Sets the line join style. See LineJoin for the possible options.

https://love2d.org/wiki/love.graphics.setLineJoin"
  {})

(fn love.graphics.setBlendMode [mode]
  "Sets the blending mode.

https://love2d.org/wiki/love.graphics.setBlendMode"
  {})

(fn love.graphics.isWireframe {}
  "Gets whether wireframe mode is used when drawing.

https://love2d.org/wiki/love.graphics.isWireframe"
  {})

(fn love.graphics.setColor [red green blue alpha]
  "Sets the color used for drawing.

In versions prior to 11.0, color component values were within the range of 0 to 255 instead of 0 to 1.

https://love2d.org/wiki/love.graphics.setColor"
  {})

(fn love.graphics.getDefaultFilter {}
  "Returns the default scaling filters used with Images, Canvases, and Fonts.

https://love2d.org/wiki/love.graphics.getDefaultFilter"
  {})

(fn love.graphics.newShader [code]
  "Creates a new Shader object for hardware-accelerated vertex and pixel effects. A Shader contains either vertex shader code, pixel shader code, or both.

Shaders are small programs which are run on the graphics card when drawing. Vertex shaders are run once for each vertex (for example, an image has 4 vertices - one at each corner. A Mesh might have many more.) Pixel shaders are run once for each pixel on the screen which the drawn object touches. Pixel shader code is executed after all the object's vertices have been processed by the vertex shader.

https://love2d.org/wiki/love.graphics.newShader"
  {})

(fn love.graphics.setFrontFaceWinding [winding]
  "Sets whether triangles with clockwise- or counterclockwise-ordered vertices are considered front-facing.

This is designed for use in combination with Mesh face culling. Other love.graphics shapes, lines, and sprites are not guaranteed to have a specific winding order to their internal vertices.

https://love2d.org/wiki/love.graphics.setFrontFaceWinding"
  {})

(fn love.graphics.getCanvasFormats {}
  "Gets the available Canvas formats, and whether each is supported.

https://love2d.org/wiki/love.graphics.getCanvasFormats"
  {})

(fn love.graphics.setDepthMode [comparemode write]
  "Configures depth testing and writing to the depth buffer.

This is low-level functionality designed for use with custom vertex shaders and Meshes with custom vertex attributes. No higher level APIs are provided to set the depth of 2D graphics such as shapes, lines, and Images.

https://love2d.org/wiki/love.graphics.setDepthMode"
  {})

(fn love.graphics.setFont [font]
  "Set an already-loaded Font as the current font or create and load a new one from the file and size.

It's recommended that Font objects are created with love.graphics.newFont in the loading stage and then passed to this function in the drawing stage.

https://love2d.org/wiki/love.graphics.setFont"
  {})

(fn love.graphics.replaceTransform [transform]
  "Replaces the current coordinate transformation with the given Transform object.

https://love2d.org/wiki/love.graphics.replaceTransform"
  {})

(fn love.graphics.rectangle [mode x y width height]
  "Draws a rectangle.

https://love2d.org/wiki/love.graphics.rectangle"
  {})

(fn love.graphics.draw [drawable x y r sx sy ox oy kx ky]
  "Draws a Drawable object (an Image, Canvas, SpriteBatch, ParticleSystem, Mesh, Text object, or Video) on the screen with optional rotation, scaling and shearing.

Objects are drawn relative to their local coordinate system. The origin is by default located at the top left corner of Image and Canvas. All scaling, shearing, and rotation arguments transform the object relative to that point. Also, the position of the origin can be specified on the screen coordinate system.

It's possible to rotate an object about its center by offsetting the origin to the center. Angles must be given in radians for rotation. One can also use a negative scaling factor to flip about its centerline.

Note that the offsets are applied before rotation, scaling, or shearing; scaling and shearing are applied before rotation.

The right and bottom edges of the object are shifted at an angle defined by the shearing factors.

When using the default shader anything drawn with this function will be tinted according to the currently selected color.  Set it to pure white to preserve the object's original colors.

https://love2d.org/wiki/love.graphics.draw"
  {})

(fn love.graphics.getLineWidth {}
  "Gets the current line width.

https://love2d.org/wiki/love.graphics.getLineWidth"
  {})

(fn love.graphics.getTextureTypes {}
  "Gets the available texture types, and whether each is supported.

https://love2d.org/wiki/love.graphics.getTextureTypes"
  {})

(fn love.graphics.captureScreenshot [filename]
  "Creates a screenshot once the current frame is done (after love.draw has finished).

Since this function enqueues a screenshot capture rather than executing it immediately, it can be called from an input callback or love.update and it will still capture all of what's drawn to the screen in that frame.

https://love2d.org/wiki/love.graphics.captureScreenshot"
  {})

(fn love.graphics.origin {}
  "Resets the current coordinate transformation.

This function is always used to reverse any previous calls to love.graphics.rotate, love.graphics.scale, love.graphics.shear or love.graphics.translate. It returns the current transformation state to its defaults.

https://love2d.org/wiki/love.graphics.origin"
  {})

(fn love.graphics.newImage [filename flags]
  "Creates a new Image from a filepath, FileData, an ImageData, or a CompressedImageData, and optionally generates or specifies mipmaps for the image.

https://love2d.org/wiki/love.graphics.newImage"
  {})

(fn love.graphics.printf [text x y limit align r sx sy ox oy kx ky]
  "Draws formatted text, with word wrap and alignment.

See additional notes in love.graphics.print.

The word wrap limit is applied before any scaling, rotation, and other coordinate transformations. Therefore the amount of text per line stays constant given the same wrap limit, even if the scale arguments change.

In version 0.9.2 and earlier, wrapping was implemented by breaking up words by spaces and putting them back together to make sure things fit nicely within the limit provided. However, due to the way this is done, extra spaces between words would end up missing when printed on the screen, and some lines could overflow past the provided wrap limit. In version 0.10.0 and newer this is no longer the case.

In versions prior to 11.0, color and byte component values were within the range of 0 to 255 instead of 0 to 1.

https://love2d.org/wiki/love.graphics.printf"
  {})

(fn love.graphics.push {}
  "Copies and pushes the current coordinate transformation to the transformation stack.

This function is always used to prepare for a corresponding pop operation later. It stores the current coordinate transformation state into the transformation stack and keeps it active. Later changes to the transformation can be undone by using the pop operation, which returns the coordinate transform to the state it was in before calling push.

https://love2d.org/wiki/love.graphics.push"
  {})

(fn love.graphics.print [text x y r sx sy ox oy kx ky]
  "Draws text on screen. If no Font is set, one will be created and set (once) if needed.

As of LOVE 0.7.1, when using translation and scaling functions while drawing text, this function assumes the scale occurs first.  If you don't script with this in mind, the text won't be in the right position, or possibly even on screen.

love.graphics.print and love.graphics.printf both support UTF-8 encoding. You'll also need a proper Font for special characters.

In versions prior to 11.0, color and byte component values were within the range of 0 to 255 instead of 0 to 1.

https://love2d.org/wiki/love.graphics.print"
  {})

(fn love.graphics.getFont {}
  "Gets the current Font object.

https://love2d.org/wiki/love.graphics.getFont"
  {})

(fn love.graphics.polygon [mode ...]
  "Draw a polygon.

Following the mode argument, this function can accept multiple numeric arguments or a single table of numeric arguments. In either case the arguments are interpreted as alternating x and y coordinates of the polygon's vertices.

https://love2d.org/wiki/love.graphics.polygon"
  {})

(fn love.graphics.drawInstanced [mesh instancecount x y r sx sy ox oy kx ky]
  "Draws many instances of a Mesh with a single draw call, using hardware geometry instancing.

Each instance can have unique properties (positions, colors, etc.) but will not by default unless a custom per-instance vertex attributes or the love_InstanceID GLSL 3 vertex shader variable is used, otherwise they will all render at the same position on top of each other.

Instancing is not supported by some older GPUs that are only capable of using OpenGL ES 2 or OpenGL 2. Use love.graphics.getSupported to check.

https://love2d.org/wiki/love.graphics.drawInstanced"
  {})

(fn love.graphics.getFrontFaceWinding {}
  "Gets whether triangles with clockwise- or counterclockwise-ordered vertices are considered front-facing.

This is designed for use in combination with Mesh face culling. Other love.graphics shapes, lines, and sprites are not guaranteed to have a specific winding order to their internal vertices.

https://love2d.org/wiki/love.graphics.getFrontFaceWinding"
  {})

(fn love.graphics.applyTransform [transform]
  "Applies the given Transform object to the current coordinate transformation.

This effectively multiplies the existing coordinate transformation's matrix with the Transform object's internal matrix to produce the new coordinate transformation.

https://love2d.org/wiki/love.graphics.applyTransform"
  {})

(fn love.graphics.arc [drawmode x y radius angle1 angle2 segments]
  "Draws a filled or unfilled arc at position (x, y). The arc is drawn from angle1 to angle2 in radians. The segments parameter determines how many segments are used to draw the arc. The more segments, the smoother the edge.

https://love2d.org/wiki/love.graphics.arc"
  {})

(fn love.graphics.getPointSize {}
  "Gets the point size.

https://love2d.org/wiki/love.graphics.getPointSize"
  {})

(fn love.graphics.getDepthMode {}
  "Gets the current depth test mode and whether writing to the depth buffer is enabled.

This is low-level functionality designed for use with custom vertex shaders and Meshes with custom vertex attributes. No higher level APIs are provided to set the depth of 2D graphics such as shapes, lines, and Images.

https://love2d.org/wiki/love.graphics.getDepthMode"
  {})

(fn love.graphics.transformPoint [globalX globalY]
  "Converts the given 2D position from global coordinates into screen-space.

This effectively applies the current graphics transformations to the given position. A similar Transform:transformPoint method exists for Transform objects.

https://love2d.org/wiki/love.graphics.transformPoint"
  {})

(fn love.graphics.getStats {}
  "Gets performance-related rendering statistics.

https://love2d.org/wiki/love.graphics.getStats"
  {})

(fn love.graphics.getScissor {}
  "Gets the current scissor box.

https://love2d.org/wiki/love.graphics.getScissor"
  {})

(fn love.graphics.getColorMask {}
  "Gets the active color components used when drawing. Normally all 4 components are active unless love.graphics.setColorMask has been used.

The color mask determines whether individual components of the colors of drawn objects will affect the color of the screen. They affect love.graphics.clear and Canvas:clear as well.

https://love2d.org/wiki/love.graphics.getColorMask"
  {})

(fn love.graphics.getSystemLimits {}
  "Gets the system-dependent maximum values for love.graphics features.

https://love2d.org/wiki/love.graphics.getSystemLimits"
  {})

(fn love.graphics.points [x y ...]
  "Draws one or more points.

https://love2d.org/wiki/love.graphics.points"
  {})

(fn love.graphics.getPixelWidth {}
  "Gets the width in pixels of the window.

The graphics coordinate system and DPI scale factor, rather than raw pixels. Use getWidth for calculations related to drawing to the screen and using the coordinate system (calculating the center of the screen, for example), and getPixelWidth only when dealing specifically with underlying pixels (pixel-related calculations in a pixel Shader, for example).

https://love2d.org/wiki/love.graphics.getPixelWidth"
  {})

(fn love.graphics.newCanvas {}
  "Creates a new Canvas object for offscreen rendering.

https://love2d.org/wiki/love.graphics.newCanvas"
  {})

(fn love.graphics.newImageFont [filename glyphs]
  "Creates a new specifically formatted image.

In versions prior to 0.9.0, LÖVE expects ISO 8859-1 encoding for the glyphs string.

https://love2d.org/wiki/love.graphics.newImageFont"
  {})

(fn love.graphics.newQuad [x y width height sw sh]
  "Creates a new Quad.

The purpose of a Quad is to use a fraction of an image to draw objects, as opposed to drawing entire image. It is most useful for sprite sheets and atlases: in a sprite atlas, multiple sprites reside in same image, quad is used to draw a specific sprite from that image; in animated sprites with all frames residing in the same image, quad is used to draw specific frame from the animation.

https://love2d.org/wiki/love.graphics.newQuad"
  {})

(fn love.graphics.setCanvas [canvas mipmap]
  "Captures drawing operations to a Canvas.

https://love2d.org/wiki/love.graphics.setCanvas"
  {})

(tset love :system {})
(fn love.system.setClipboardText [text]
  "Puts text in the clipboard.

https://love2d.org/wiki/love.system.setClipboardText"
  {})

(fn love.system.hasBackgroundMusic {}
  "Gets whether another application on the system is playing music in the background.

Currently this is implemented on iOS and Android, and will always return false on other operating systems. The t.audio.mixwithsystem flag in love.conf can be used to configure whether background audio / music from other apps should play while LÖVE is open.

https://love2d.org/wiki/love.system.hasBackgroundMusic"
  {})

(fn love.system.getOS {}
  "Gets the current operating system. In general, LÖVE abstracts away the need to know the current operating system, but there are a few cases where it can be useful (especially in combination with os.execute.)

https://love2d.org/wiki/love.system.getOS"
  {})

(fn love.system.vibrate [seconds]
  "Causes the device to vibrate, if possible. Currently this will only work on Android and iOS devices that have a built-in vibration motor.

https://love2d.org/wiki/love.system.vibrate"
  {})

(fn love.system.getClipboardText {}
  "Gets text from the clipboard.

https://love2d.org/wiki/love.system.getClipboardText"
  {})

(fn love.system.getProcessorCount {}
  "Gets the amount of logical processor in the system.

https://love2d.org/wiki/love.system.getProcessorCount"
  {})

(fn love.system.getPowerInfo {}
  "Gets information about the system's power supply.

https://love2d.org/wiki/love.system.getPowerInfo"
  {})

(fn love.system.openURL [url]
  "Opens a URL with the user's web or file browser.

https://love2d.org/wiki/love.system.openURL"
  {})

(tset love :sound {})
(fn love.sound.newSoundData [filename]
  "Creates new SoundData from a filepath, File, or Decoder. It's also possible to create SoundData with a custom sample rate, channel and bit depth.

The sound data will be decoded to the memory in a raw format. It is recommended to create only short sounds like effects, as a 3 minute song uses 30 MB of memory this way.

https://love2d.org/wiki/love.sound.newSoundData"
  {})

(fn love.sound.newDecoder [file buffer]
  "Attempts to find a decoder for the encoded sound data in the specified file.

https://love2d.org/wiki/love.sound.newDecoder"
  {})

(tset love :video {})
(fn love.video.newVideoStream [filename]
  "Creates a new VideoStream. Currently only Ogg Theora video files are supported. VideoStreams can't draw videos, see love.graphics.newVideo for that.

https://love2d.org/wiki/love.video.newVideoStream"
  {})

(tset love :event {})
(fn love.event.clear {}
  "Clears the event queue.

https://love2d.org/wiki/love.event.clear"
  {})

(fn love.event.pump {}
  "Pump events into the event queue.

This is a low-level function, and is usually not called by the user, but by love.run.

Note that this does need to be called for any OS to think you're still running,

and if you want to handle OS-generated events at all (think callbacks).

https://love2d.org/wiki/love.event.pump"
  {})

(fn love.event.poll {}
  "Returns an iterator for messages in the event queue.

https://love2d.org/wiki/love.event.poll"
  {})

(fn love.event.wait {}
  "Like love.event.poll(), but blocks until there is an event in the queue.

https://love2d.org/wiki/love.event.wait"
  {})

(fn love.event.push [n a b c d e f ...]
  "Adds an event to the event queue.

From 0.10.0 onwards, you may pass an arbitrary amount of arguments with this function, though the default callbacks don't ever use more than six.

https://love2d.org/wiki/love.event.push"
  {})

(fn love.event.quit [exitstatus]
  "Adds the quit event to the queue.

The quit event is a signal for the event handler to close LÖVE. It's possible to abort the exit process with the love.quit callback.

https://love2d.org/wiki/love.event.quit"
  {})

(tset love :thread {})
(fn love.thread.newChannel {}
  "Create a new unnamed thread channel.

One use for them is to pass new unnamed channels to other threads via Channel:push on a named channel.

https://love2d.org/wiki/love.thread.newChannel"
  {})

(fn love.thread.getChannel [name]
  "Creates or retrieves a named thread channel.

https://love2d.org/wiki/love.thread.getChannel"
  {})

(fn love.thread.newThread [filename]
  "Creates a new Thread from a filename, string or FileData object containing Lua code.

https://love2d.org/wiki/love.thread.newThread"
  {})

(tset love :mouse {})
(fn love.mouse.getCursor {}
  "Gets the current Cursor.

https://love2d.org/wiki/love.mouse.getCursor"
  {})

(fn love.mouse.isDown [button ...]
  "Checks whether a certain mouse button is down.

This function does not detect mouse wheel scrolling; you must use the love.wheelmoved (or love.mousepressed in version 0.9.2 and older) callback for that.

https://love2d.org/wiki/love.mouse.isDown"
  {})

(fn love.mouse.setX [x]
  "Sets the current X position of the mouse.

Non-integer values are floored.

https://love2d.org/wiki/love.mouse.setX"
  {})

(fn love.mouse.getSystemCursor [ctype]
  "Gets a Cursor object representing a system-native hardware cursor.

Hardware cursors are framerate-independent and work the same way as normal operating system cursors. Unlike drawing an image at the mouse's current coordinates, hardware cursors never have visible lag between when the mouse is moved and when the cursor position updates, even at low framerates.

https://love2d.org/wiki/love.mouse.getSystemCursor"
  {})

(fn love.mouse.setVisible [visible]
  "Sets the current visibility of the cursor.

https://love2d.org/wiki/love.mouse.setVisible"
  {})

(fn love.mouse.setY [y]
  "Sets the current Y position of the mouse.

Non-integer values are floored.

https://love2d.org/wiki/love.mouse.setY"
  {})

(fn love.mouse.setCursor [cursor]
  "Sets the current mouse cursor.

https://love2d.org/wiki/love.mouse.setCursor"
  {})

(fn love.mouse.getRelativeMode {}
  "Gets whether relative mode is enabled for the mouse.

If relative mode is enabled, the cursor is hidden and doesn't move when the mouse does, but relative mouse motion events are still generated via love.mousemoved. This lets the mouse move in any direction indefinitely without the cursor getting stuck at the edges of the screen.

The reported position of the mouse is not updated while relative mode is enabled, even when relative mouse motion events are generated.

https://love2d.org/wiki/love.mouse.getRelativeMode"
  {})

(fn love.mouse.isCursorSupported {}
  "Gets whether cursor functionality is supported.

If it isn't supported, calling love.mouse.newCursor and love.mouse.getSystemCursor will cause an error. Mobile devices do not support cursors.

https://love2d.org/wiki/love.mouse.isCursorSupported"
  {})

(fn love.mouse.setGrabbed [grab]
  "Grabs the mouse and confines it to the window.

https://love2d.org/wiki/love.mouse.setGrabbed"
  {})

(fn love.mouse.newCursor [imageData hotx hoty]
  "Creates a new hardware Cursor object from an image file or ImageData.

Hardware cursors are framerate-independent and work the same way as normal operating system cursors. Unlike drawing an image at the mouse's current coordinates, hardware cursors never have visible lag between when the mouse is moved and when the cursor position updates, even at low framerates.

The hot spot is the point the operating system uses to determine what was clicked and at what position the mouse cursor is. For example, the normal arrow pointer normally has its hot spot at the top left of the image, but a crosshair cursor might have it in the middle.

https://love2d.org/wiki/love.mouse.newCursor"
  {})

(fn love.mouse.isGrabbed {}
  "Checks if the mouse is grabbed.

https://love2d.org/wiki/love.mouse.isGrabbed"
  {})

(fn love.mouse.setPosition [x y]
  "Sets the current position of the mouse. Non-integer values are floored.

https://love2d.org/wiki/love.mouse.setPosition"
  {})

(fn love.mouse.getX {}
  "Returns the current x-position of the mouse.

https://love2d.org/wiki/love.mouse.getX"
  {})

(fn love.mouse.setRelativeMode [enable]
  "Sets whether relative mode is enabled for the mouse.

When relative mode is enabled, the cursor is hidden and doesn't move when the mouse does, but relative mouse motion events are still generated via love.mousemoved. This lets the mouse move in any direction indefinitely without the cursor getting stuck at the edges of the screen.

The reported position of the mouse may not be updated while relative mode is enabled, even when relative mouse motion events are generated.

https://love2d.org/wiki/love.mouse.setRelativeMode"
  {})

(fn love.mouse.getPosition {}
  "Returns the current position of the mouse.

https://love2d.org/wiki/love.mouse.getPosition"
  {})

(fn love.mouse.isVisible {}
  "Checks if the cursor is visible.

https://love2d.org/wiki/love.mouse.isVisible"
  {})

(fn love.mouse.getY {}
  "Returns the current y-position of the mouse.

https://love2d.org/wiki/love.mouse.getY"
  {})

(tset love :window {})
(fn love.window.setIcon [imagedata]
  "Sets the window icon until the game is quit. Not all operating systems support very large icon images.

https://love2d.org/wiki/love.window.setIcon"
  {})

(fn love.window.getDisplayName [displayindex]
  "Gets the name of a display.

https://love2d.org/wiki/love.window.getDisplayName"
  {})

(fn love.window.minimize {}
  "Minimizes the window to the system's task bar / dock.

https://love2d.org/wiki/love.window.minimize"
  {})

(fn love.window.getDisplayCount {}
  "Gets the number of connected monitors.

https://love2d.org/wiki/love.window.getDisplayCount"
  {})

(fn love.window.getMode {}
  "Gets the display mode and properties of the window.

https://love2d.org/wiki/love.window.getMode"
  {})

(fn love.window.updateMode [width height settings]
  "Sets the display mode and properties of the window, without modifying unspecified properties.

If width or height is 0, updateMode will use the width and height of the desktop.

Changing the display mode may have side effects: for example, canvases will be cleared. Make sure to save the contents of canvases beforehand or re-draw to them afterward if you need to.

https://love2d.org/wiki/love.window.updateMode"
  {})

(fn love.window.getDisplayOrientation [displayindex]
  "Gets current device display orientation.

https://love2d.org/wiki/love.window.getDisplayOrientation"
  {})

(fn love.window.isVisible {}
  "Checks if the game window is visible.

The window is considered visible if it's not minimized and the program isn't hidden.

https://love2d.org/wiki/love.window.isVisible"
  {})

(fn love.window.isMaximized {}
  "Gets whether the Window is currently maximized.

The window can be maximized if it is not fullscreen and is resizable, and either the user has pressed the window's Maximize button or love.window.maximize has been called.

https://love2d.org/wiki/love.window.isMaximized"
  {})

(fn love.window.setTitle [title]
  "Sets the window title.

https://love2d.org/wiki/love.window.setTitle"
  {})

(fn love.window.showMessageBox [title message type attachtowindow]
  "Displays a message box dialog above the love window. The message box contains a title, optional text, and buttons.

https://love2d.org/wiki/love.window.showMessageBox"
  {})

(fn love.window.setPosition [x y displayindex]
  "Sets the position of the window on the screen.

The window position is in the coordinate space of the specified display.

https://love2d.org/wiki/love.window.setPosition"
  {})

(fn love.window.restore {}
  "Restores the size and position of the window if it was minimized or maximized.

https://love2d.org/wiki/love.window.restore"
  {})

(fn love.window.getFullscreen {}
  "Gets whether the window is fullscreen.

https://love2d.org/wiki/love.window.getFullscreen"
  {})

(fn love.window.getPosition {}
  "Gets the position of the window on the screen.

The window position is in the coordinate space of the display it is currently in.

https://love2d.org/wiki/love.window.getPosition"
  {})

(fn love.window.setDisplaySleepEnabled [enable]
  "Sets whether the display is allowed to sleep while the program is running.

Display sleep is disabled by default. Some types of input (e.g. joystick button presses) might not prevent the display from sleeping, if display sleep is allowed.

https://love2d.org/wiki/love.window.setDisplaySleepEnabled"
  {})

(fn love.window.hasFocus {}
  "Checks if the game window has keyboard focus.

https://love2d.org/wiki/love.window.hasFocus"
  {})

(fn love.window.getTitle {}
  "Gets the window title.

https://love2d.org/wiki/love.window.getTitle"
  {})

(fn love.window.getSafeArea {}
  "Gets area inside the window which is known to be unobstructed by a system title bar, the iPhone X notch, etc. Useful for making sure UI elements can be seen by the user.

https://love2d.org/wiki/love.window.getSafeArea"
  {})

(fn love.window.getDesktopDimensions [displayindex]
  "Gets the width and height of the desktop.

https://love2d.org/wiki/love.window.getDesktopDimensions"
  {})

(fn love.window.getFullscreenModes [displayindex]
  "Gets a list of supported fullscreen modes.

https://love2d.org/wiki/love.window.getFullscreenModes"
  {})

(fn love.window.setVSync [vsync]
  "Sets vertical synchronization mode.

https://love2d.org/wiki/love.window.setVSync"
  {})

(fn love.window.isMinimized {}
  "Gets whether the Window is currently minimized.

https://love2d.org/wiki/love.window.isMinimized"
  {})

(fn love.window.isDisplaySleepEnabled {}
  "Gets whether the display is allowed to sleep while the program is running.

Display sleep is disabled by default. Some types of input (e.g. joystick button presses) might not prevent the display from sleeping, if display sleep is allowed.

https://love2d.org/wiki/love.window.isDisplaySleepEnabled"
  {})

(fn love.window.toPixels [value]
  "Converts a number from density-independent units to pixels.

The pixel density inside the window might be greater (or smaller) than the 'size' of the window. For example on a retina screen in Mac OS X with the highdpi window flag enabled, the window may take up the same physical size as an 800x600 window, but the area inside the window uses 1600x1200 pixels. love.window.toPixels(800) would return 1600 in that case.

This is used to convert coordinates from the size users are expecting them to display at onscreen to pixels. love.window.fromPixels does the opposite. The highdpi window flag must be enabled to use the full pixel density of a Retina screen on Mac OS X and iOS. The flag currently does nothing on Windows and Linux, and on Android it is effectively always enabled.

Most LÖVE functions return values and expect arguments in terms of pixels rather than density-independent units.

https://love2d.org/wiki/love.window.toPixels"
  {})

(fn love.window.getIcon {}
  "Gets the window icon.

https://love2d.org/wiki/love.window.getIcon"
  {})

(fn love.window.close {}
  "Closes the window. It can be reopened with love.window.setMode.

https://love2d.org/wiki/love.window.close"
  {})

(fn love.window.fromPixels [pixelvalue]
  "Converts a number from pixels to density-independent units.

The pixel density inside the window might be greater (or smaller) than the 'size' of the window. For example on a retina screen in Mac OS X with the highdpi window flag enabled, the window may take up the same physical size as an 800x600 window, but the area inside the window uses 1600x1200 pixels. love.window.fromPixels(1600) would return 800 in that case.

This function converts coordinates from pixels to the size users are expecting them to display at onscreen. love.window.toPixels does the opposite. The highdpi window flag must be enabled to use the full pixel density of a Retina screen on Mac OS X and iOS. The flag currently does nothing on Windows and Linux, and on Android it is effectively always enabled.

Most LÖVE functions return values and expect arguments in terms of pixels rather than density-independent units.

https://love2d.org/wiki/love.window.fromPixels"
  {})

(fn love.window.getDPIScale {}
  "Gets the DPI scale factor associated with the window.

The pixel density inside the window might be greater (or smaller) than the 'size' of the window. For example on a retina screen in Mac OS X with the highdpi window flag enabled, the window may take up the same physical size as an 800x600 window, but the area inside the window uses 1600x1200 pixels. love.window.getDPIScale() would return 2.0 in that case.

The love.window.fromPixels and love.window.toPixels functions can also be used to convert between units.

The highdpi window flag must be enabled to use the full pixel density of a Retina screen on Mac OS X and iOS. The flag currently does nothing on Windows and Linux, and on Android it is effectively always enabled.

https://love2d.org/wiki/love.window.getDPIScale"
  {})

(fn love.window.getVSync {}
  "Gets current vertical synchronization (vsync).

https://love2d.org/wiki/love.window.getVSync"
  {})

(fn love.window.hasMouseFocus {}
  "Checks if the game window has mouse focus.

https://love2d.org/wiki/love.window.hasMouseFocus"
  {})

(fn love.window.maximize {}
  "Makes the window as large as possible.

This function has no effect if the window isn't resizable, since it essentially programmatically presses the window's 'maximize' button.

https://love2d.org/wiki/love.window.maximize"
  {})

(fn love.window.setMode [width height flags]
  "Sets the display mode and properties of the window.

If width or height is 0, setMode will use the width and height of the desktop.

Changing the display mode may have side effects: for example, canvases will be cleared and values sent to shaders with canvases beforehand or re-draw to them afterward if you need to.

https://love2d.org/wiki/love.window.setMode"
  {})

(fn love.window.requestAttention [continuous]
  "Causes the window to request the attention of the user if it is not in the foreground.

In Windows the taskbar icon will flash, and in OS X the dock icon will bounce.

https://love2d.org/wiki/love.window.requestAttention"
  {})

(fn love.window.setFullscreen [fullscreen]
  "Enters or exits fullscreen. The display to use when entering fullscreen is chosen based on which display the window is currently in, if multiple monitors are connected.

https://love2d.org/wiki/love.window.setFullscreen"
  {})

(fn love.window.isOpen {}
  "Checks if the window is open.

https://love2d.org/wiki/love.window.isOpen"
  {})

(tset love :keyboard {})
(fn love.keyboard.isScancodeDown [scancode ...]
  "Checks whether the specified Scancodes are pressed. Not to be confused with love.keypressed or love.keyreleased.

Unlike regular KeyConstants, Scancodes are keyboard layout-independent. The scancode 'w' is used if the key in the same place as the 'w' key on an American keyboard is pressed, no matter what the key is labelled or what the user's operating system settings are.

https://love2d.org/wiki/love.keyboard.isScancodeDown"
  {})

(fn love.keyboard.getScancodeFromKey [key]
  "Gets the hardware scancode corresponding to the given key.

Unlike key constants, Scancodes are keyboard layout-independent. For example the scancode 'w' will be generated if the key in the same place as the 'w' key on an American keyboard is pressed, no matter what the key is labelled or what the user's operating system settings are.

Scancodes are useful for creating default controls that have the same physical locations on on all systems.

https://love2d.org/wiki/love.keyboard.getScancodeFromKey"
  {})

(fn love.keyboard.hasScreenKeyboard {}
  "Gets whether screen keyboard is supported.

https://love2d.org/wiki/love.keyboard.hasScreenKeyboard"
  {})

(fn love.keyboard.setTextInput [enable]
  "Enables or disables text input events. It is enabled by default on Windows, Mac, and Linux, and disabled by default on iOS and Android.

On touch devices, this shows the system's native on-screen keyboard when it's enabled.

https://love2d.org/wiki/love.keyboard.setTextInput"
  {})

(fn love.keyboard.hasTextInput {}
  "Gets whether text input events are enabled.

https://love2d.org/wiki/love.keyboard.hasTextInput"
  {})

(fn love.keyboard.hasKeyRepeat {}
  "Gets whether key repeat is enabled.

https://love2d.org/wiki/love.keyboard.hasKeyRepeat"
  {})

(fn love.keyboard.setKeyRepeat [enable]
  "Enables or disables key repeat for love.keypressed. It is disabled by default.

https://love2d.org/wiki/love.keyboard.setKeyRepeat"
  {})

(fn love.keyboard.getKeyFromScancode [scancode]
  "Gets the key corresponding to the given hardware scancode.

Unlike key constants, Scancodes are keyboard layout-independent. For example the scancode 'w' will be generated if the key in the same place as the 'w' key on an American keyboard is pressed, no matter what the key is labelled or what the user's operating system settings are.

Scancodes are useful for creating default controls that have the same physical locations on on all systems.

https://love2d.org/wiki/love.keyboard.getKeyFromScancode"
  {})

(fn love.keyboard.isDown [key]
  "Checks whether a certain key is down. Not to be confused with love.keypressed or love.keyreleased.

https://love2d.org/wiki/love.keyboard.isDown"
  {})

(tset love :audio {})
(fn love.audio.newSource [filename type]
  "Creates a new Source from a filepath, File, Decoder or SoundData.

Sources created from SoundData are always static.

https://love2d.org/wiki/love.audio.newSource"
  {})

(fn love.audio.getEffect [name]
  "Gets the settings associated with an effect.

https://love2d.org/wiki/love.audio.getEffect"
  {})

(fn love.audio.getVelocity {}
  "Returns the velocity of the listener.

https://love2d.org/wiki/love.audio.getVelocity"
  {})

(fn love.audio.getRecordingDevices {}
  "Gets a list of RecordingDevices on the system.

The first device in the list is the user's default recording device. The list may be empty if there are no microphones connected to the system.

Audio recording is currently not supported on iOS.

https://love2d.org/wiki/love.audio.getRecordingDevices"
  {})

(fn love.audio.getActiveSourceCount {}
  "Gets the current number of simultaneously playing sources.

https://love2d.org/wiki/love.audio.getActiveSourceCount"
  {})

(fn love.audio.getDopplerScale {}
  "Gets the current global scale factor for velocity-based doppler effects.

https://love2d.org/wiki/love.audio.getDopplerScale"
  {})

(fn love.audio.getActiveEffects {}
  "Gets a list of the names of the currently enabled effects.

https://love2d.org/wiki/love.audio.getActiveEffects"
  {})

(fn love.audio.setVelocity [x y z]
  "Sets the velocity of the listener.

https://love2d.org/wiki/love.audio.setVelocity"
  {})

(fn love.audio.setVolume [volume]
  "Sets the master volume.

https://love2d.org/wiki/love.audio.setVolume"
  {})

(fn love.audio.newQueueableSource [samplerate bitdepth channels buffercount]
  "Creates a new Source usable for real-time generated sound playback with Source:queue.

https://love2d.org/wiki/love.audio.newQueueableSource"
  {})

(fn love.audio.setPosition [x y z]
  "Sets the position of the listener, which determines how sounds play.

https://love2d.org/wiki/love.audio.setPosition"
  {})

(fn love.audio.setEffect [name settings]
  "Defines an effect that can be applied to a Source.

Not all system supports audio effects. Use love.audio.isEffectsSupported to check.

https://love2d.org/wiki/love.audio.setEffect"
  {})

(fn love.audio.getPosition {}
  "Returns the position of the listener. Please note that positional audio only works for mono (i.e. non-stereo) sources.

https://love2d.org/wiki/love.audio.getPosition"
  {})

(fn love.audio.setOrientation [fx fy fz ux uy uz]
  "Sets the orientation of the listener.

https://love2d.org/wiki/love.audio.setOrientation"
  {})

(fn love.audio.getMaxSceneEffects {}
  "Gets the maximum number of active effects supported by the system.

https://love2d.org/wiki/love.audio.getMaxSceneEffects"
  {})

(fn love.audio.setDopplerScale [scale]
  "Sets a global scale factor for velocity-based doppler effects. The default scale value is 1.

https://love2d.org/wiki/love.audio.setDopplerScale"
  {})

(fn love.audio.getSourceCount {}
  "Gets the current number of simultaneously playing sources.

https://love2d.org/wiki/love.audio.getSourceCount"
  {})

(fn love.audio.getOrientation {}
  "Returns the orientation of the listener.

https://love2d.org/wiki/love.audio.getOrientation"
  {})

(fn love.audio.isEffectsSupported {}
  "Gets whether audio effects are supported in the system.

https://love2d.org/wiki/love.audio.isEffectsSupported"
  {})

(fn love.audio.getDistanceModel {}
  "Returns the distance attenuation model.

https://love2d.org/wiki/love.audio.getDistanceModel"
  {})

(fn love.audio.getVolume {}
  "Returns the master volume.

https://love2d.org/wiki/love.audio.getVolume"
  {})

(fn love.audio.pause {}
  "Pauses specific or all currently played Sources.

https://love2d.org/wiki/love.audio.pause"
  {})

(fn love.audio.getMaxSourceEffects {}
  "Gets the maximum number of active Effects in a single Source object, that the system can support.

https://love2d.org/wiki/love.audio.getMaxSourceEffects"
  {})

(fn love.audio.stop {}
  "Stops currently played sources.

https://love2d.org/wiki/love.audio.stop"
  {})

(fn love.audio.setMixWithSystem [mix]
  "Sets whether the system should mix the audio with the system's audio.

https://love2d.org/wiki/love.audio.setMixWithSystem"
  {})

(fn love.audio.play [source]
  "Plays the specified Source.

https://love2d.org/wiki/love.audio.play"
  {})

(fn love.audio.setDistanceModel [model]
  "Sets the distance attenuation model.

https://love2d.org/wiki/love.audio.setDistanceModel"
  {})

(tset love :touch {})
(fn love.touch.getPressure [id]
  "Gets the current pressure of the specified touch-press.

https://love2d.org/wiki/love.touch.getPressure"
  {})

(fn love.touch.getTouches {}
  "Gets a list of all active touch-presses.

https://love2d.org/wiki/love.touch.getTouches"
  {})

(fn love.touch.getPosition [id]
  "Gets the current position of the specified touch-press, in pixels.

https://love2d.org/wiki/love.touch.getPosition"
  {})

(if (not= nil _G.love) _G.love love)
