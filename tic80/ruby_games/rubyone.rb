# title:   game title
# author:  game developer, email, etc.
# desc:    short description
# site:    website link
# license: MIT License (change this to your license of choice)
# version: 0.1
# script:  ruby

module Btn
  # https://github.com/nesbox/TIC-80/wiki/key-map
  UP = 0
  DOWN = 1
  LEFT = 2
  RIGHT = 3
  A = 4
  B = 5
  X = 6
  Y = 7
end

module Color
  # PICO-8 color palette
  BLACK = 0
  DARK_BLUE = 1
  DARK_PURPLE = 2
  DARK_GREEN = 3
  BROWN = 4
  DARK_GREY = 5
  LIGHT_GREY = 6
  WHITE = 7
  RED = 8
  ORANGE = 9
  YELLOW = 10
  GREEN = 11
  BLUE = 12
  LAVENDER = 13
  PINK = 14
  LIGHT_PEACH = 15
end

module SpriteFlags
  SOLID = 0
end


# ----------------------------------------------------------------

class Coroutine < Enumerator
  attr_reader :status

  def initialize(&block)
    @status = :created
    super(&block)
  end

  def resume
    @status = :running
    self.next
  rescue StopIteration
    @status = :dead
    nil
  end

  def self.new_moving_coro(obj, target_x, target_y, speed_per_tick = 2)
    # TODO this does not work considering that now movement happens in grid space
    Coroutine.new do |y|
      loop do
        dx = target_x - obj.x
        dy = target_y - obj.y
        distance = Math.sqrt(dx**2 + dy**2)

        if distance < speed_per_tick
          obj.x = target_x
          obj.y = target_y
          break
        end

        angle = Math.atan2(dy, dx)
        obj.x += Math.cos(angle) * speed_per_tick
        obj.y += Math.sin(angle) * speed_per_tick
        y << true
      end
    end
  end
end

class Map
  @@current_level = -1
  @@levels = [
    {
      doors: [],
      entities: [],
    }
  ]

  def self.cords_have_flag?(x, y, flag)
    x, y = map_cords_to_screen(x, y)
    fget(mget(x / 8, y / 8), flag)
  end

  def self.map_cords_to_screen(x, y)
    # TODO account for current level
    [x * 8, y * 8]
  end

  def self.map_screen_to_cords(x, y)
    # TODO account for current level
    [x / 8, y / 8]
  end

  def self.load(level)
    @@current_level = level
    level_data = @@levels[level]
    return if level_data[:already_loaded]

    tiles_in_x = 30
    tiles_in_y = 17

    level_data[:already_loaded] = true
    level_data[:doors].each { |door| door.load }
    level_data[:entities].each { |entity| entity.load }
  end

  def self.draw
    # TODO account for `current level` to know which cordinates to draw
    map 0, 0
  end
end

class Entity
  attr_accessor :x, :y

  def initialize(x, y)
    @x = x
    @y = y
  end

  def update; end

  def draw; end
end

class Player < Entity
  def initialize(x, y)
    super(x, y)
    @moving_coro = nil
    @next_move = nil
    @inventory = []
  end

  def update
    if @moving_coro.nil?
      start_movement
    else
      queue_next_move
      continue_movement
    end
  end

  def start_movement
    delta_x = btnp(Btn::LEFT) ? -1 : btnp(Btn::RIGHT) ? 1 : 0
    delta_y = btnp(Btn::UP) ? -1 : btnp(Btn::DOWN) ? 1 : 0
    delta_x, delta_y = 0, 0 if delta_x != 0 && delta_y != 0  # prevent diagonal movement

    target_x = @x + delta_x
    target_y = @y + delta_y

    has_collision = Map.cords_have_flag?(target_x, target_y, SpriteFlags::SOLID)

    if !has_collision && (delta_x != 0 || delta_y != 0)
      @moving_coro = Coroutine.new_moving_coro(self, @x + delta_x, @y + delta_y)
    end
  end

  def queue_next_move
    # if the player presses a new direction, queue it up
    if btnp(Btn::LEFT) || btnp(Btn::RIGHT) || btnp(Btn::UP) || btnp(Btn::DOWN)
      @next_move = { left: btnp(Btn::LEFT), right: btnp(Btn::RIGHT), up: btnp(Btn::UP), down: btnp(Btn::DOWN) }
    end
  end

  def continue_movement
    @moving_coro.resume
    if @moving_coro.status == :dead
      @moving_coro = nil
      start_next_move if @next_move
    end
  end

  def start_next_move
    raise "No next move queued" unless @next_move

    delta_x = @next_move[:left] ? -1 : @next_move[:right] ? 1 : 0
    delta_y = @next_move[:up] ? -1 : @next_move[:down] ? 1 : 0

    target_x = @x + delta_x
    target_y = @y + delta_y
    has_collision = Map.cords_have_flag?(target_x, target_y, SpriteFlags::SOLID)

    if !has_collision && (delta_x != 0 || delta_y != 0)
      @moving_coro = Coroutine.new_moving_coro(self, @x + delta_x, @y + delta_y)
    end

    @next_move = nil
  end

  def draw
    x, y = Map.map_cords_to_screen(@x, @y)
    spr 256, x, y, 0
  end
end

# ----------------------------------------------------------------

$player = Player.new(1, 1)

def potato(hehe)
  print hehe
end

trace "Running with Ruby: #{RUBY_VERSION}"

eeee = Coroutine.new do |y|
  q = 100
  loop do
    y << q # yield

    q += 1

    break if q > 105
  end

  trace 'done'
end

trace "Status: #{eeee.status}"
trace "resume: #{eeee.resume} - Status: #{eeee.status}"
trace "resume: #{eeee.resume} - Status: #{eeee.status}"
trace "resume: #{eeee.resume} - Status: #{eeee.status}"
trace "resume: #{eeee.resume} - Status: #{eeee.status}"
trace "resume: #{eeee.resume} - Status: #{eeee.status}"
trace "resume: #{eeee.resume} - Status: #{eeee.status}"
trace "resume: #{eeee.resume} - Status: #{eeee.status}"
trace "resume: #{eeee.resume} - Status: #{eeee.status}"
trace "Status: #{eeee.status}"

def TIC
  cls Color::BLACK

  Map.draw

  $player.update
  $player.draw
end

# <TILES>
# 001:0aaaaaaa0a00000a0a0a0a0a0a00000a0a0a0a0a0a00000a0aaaaaaa00000000
# </TILES>

# <SPRITES>
# 000:0000aa00000000a00aaa00aa000000a000a0000000a0aa0000a0a00000000000
# </SPRITES>

# <MAP>
# 000:101010101000000000000000000000000000000000000000000000101010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
# 001:100000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
# 002:100000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
# 003:100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
# 004:100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
# 005:000000000000101010101010101000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
# 006:000000000000100000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
# 007:000000000000100000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
# 008:000000000000100000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
# 009:000000000000100000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
# 011:000000000000001010101010100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
# 014:100000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
# 015:100000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
# 016:101010000000000000000000000000000000000000000000000000101010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
# </MAP>

# <WAVES>
# 000:00000000ffffffff00000000ffffffff
# 001:0123456789abcdeffedcba9876543210
# 002:0123456789abcdef0123456789abcdef
# </WAVES>

# <SFX>
# 000:000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000304000000000
# </SFX>

# <TRACKS>
# 000:100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
# </TRACKS>

# <FLAGS>

# </FLAGS>

# <PALETTE>
# 000:0000001d2b537e2553008751ab52365f574fc2c3c7fff1e8ff004dffa300ffec2700e43629adff83769cff77a8ffccaa
# </PALETTE>
