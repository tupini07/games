pico-8 cartridge // http://www.pico-8.com
version 41
__lua__
-- jumper!

function _init()
	gs_init()
end

function _draw()
	x_draw()
end

function _update60()
	x_update60()
end


-- intro scene

function is_init()
	x_draw = is_update
	x_update60 = is_draw
end

function is_update()
	if btnp(❎) then
		gs_init()
	end
end

function is_draw()
	cls()
	print("welcome")
	print("press ❎ to go to play")
end
-->8
-- game won scene

function gw_init()
	x_draw = gw_update
	x_update60 = gw_draw
	
	-- in case the player wants
	-- to restart the game from
	-- the beginning
	mp:set_level(0)
end

function gw_update()
	if btnp(❎) then
		is_init()
	end
end

function gw_draw()
	cls()
	print("ya won!")
	print("press ❎ to go to intro")
end


-->8
-- game over scene

function go_init()
	x_draw = go_update
	x_update60 = go_draw
end

function go_update()
	if btnp(❎) then
		gs_init()
	end
end

function go_draw()
	cls()
	print("ya dead")
	print("press ❎ to retry")
end
-->8
-- game scene

gs = {}

function gs_init()
	gs = {
		started = false
	}

	pl:init(10,10)
	
	x_draw = gs_draw
	x_update60 = gs_update
end

function gs_update()
	
	if not gs.started then
		-- give time for the player
		-- to absorb the level before
		-- starting
		if btnp(❎) then
			gs.started = true
		end
		return
	end
	
	pl:update()
	
	if pl:is_dead() then
		go_init()
	end
	
	if pl:is_won() then
		if mp:is_there_next_level() then
			
		else
			gw_init()
		end
	end
end

function gs_draw()
	cls()
	
	mp:draw()
	pl:draw()
	
	if not gs.started then
		-- rectf(x,y,w,h,color)
		rectfill(0,0,9*8,8,1)
		
		print("press ❎ to start",
							 3,
							 2,
							 -- color 
							 7)
	end
end
-->8
-- player

--[[
nice that comments no longer count
as tokens! that is really 
wonderful. documentation.
]]

pl = {}

--- initializes player at game
--- world location (x,y)
function pl:init(x,y)
	self.spr = 1
	self.x = x
	self.y = y
	self.vx = 0
	self.vy = 0
end

function pl:update()

	-- dampen x
	self.vx *= 0.9

	self.x += self.vx
	self.y += self.vy
	
	local pl_vel = 0.2
	local pl_max_vel = 1
	
	if btn(⬅️) then
		self.vx -= pl_vel
	end
	if btn(➡️) then
		self.vx += pl_vel
	end


	if btn(⬆️) then
		self.vy -= 0.2
	end
		
	-- always apply gravity
	self.vy += 0.1
	
	self.vx = clamp(self.vx, -pl_max_vel, pl_max_vel)
	
end

function pl:draw()
	spr(self.spr, 
					flr(self.x), 
					flr(self.y))
					
	local corners = self:get_corners()
	for corner in all(corners) do
		local x = corner[1]
		local y = corner[2]
		
		pset(x,y,11)	
	end
end


function pl:get_corners()
	return {
		{self.x  , self.y  }, -- 0,0
		{self.x+7, self.y  }, -- w,0
		{self.x  , self.y+7}, -- 0,h
		{self.x+7, self.y+7}, -- w,h
	}
end

--- check if player collided
--- with one of the walls
function pl:is_dead()

	-- just check the corners
	local corners = self:get_corners()
	
	for corner in all(corners) do
		local x = corner[1]
		local y = corner[2]
	
		local sp = mp:get_sprite_at_px(x,y)
		
		if fget(sp, 0) then
			return true
		end
	end
	
	-- if no corners crashed then
	-- return false
	return false
end

--- check if player reached the
--- target in the room
function pl:is_won()

	-- just check the corners
	local corners = self:get_corners()
	
	for corner in all(corners) do
		local x = corner[1]
		local y = corner[2]
	
		local sp = mp:get_sprite_at_px(x,y)
		
		if fget(sp, 1) then
			return true
		end
	end
	
	-- if no corners are touching
	-- win condition then
	-- return false
	return false
	
end

-->8
-- map stuff

mp = {
	level = 0
}

function mp:set_level(lvl)
	self.level = lvl
end

function mp:draw()
	map(0,0)
end

--- returns true if there is
--- a next level. otherwise it
--- returns false (e.g., we're
--- at the last level)
function mp:is_there_next_level()
		return false
end

--- gets the sprite number using
--- the coordinates of the current
--- game/level
function mp:get_sprite_at_px(x,y)
	-- convert global coords to
	-- map coords
	local sprx = flr(x/8)
	local spry = flr(y/8)
	
	return mget(sprx, spry)
end

--- gets the pixel position at
--- which the current level 
--- starts in the 'map'.
--- 'lvl' is 0 indexed!
function mp:get_lvl_origin(lvl)
	--[[
	lvl numbers go from 0 to 16 max
	(maybe? can do more if we want)

	this function will need to convert
	from lvl number to what are the
	actual coordinates that we send
	to the 'map' function.
	
	example:
		lvl 7  = {x=112, y=0 }
		lvl 11 = {x=48 , y=17}
	]]
	
	local x = lvl % 8
	local y = flr(lvl / 8)
	
	return {
		x = x*16,
		y = y*16
	}
end
-->8
-- utils

--- clamps a value 'val' to be
--- between 'mini' and 'maxi'
function clamp(val, mini, maxi)
	return min(maxi, max(val, mini))
end

--- slowly 'lerps' value to target
--- number.
function lerp(target, 
								 current, 
								 percentage)
	 print("lerp does not work!")
--	local relation = current/target
--	local amount_to_move = relation * (100 * percentage)
	
--	return current + amount_to_move 
end

__gfx__
00000000700000070000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000066666600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00700700066006600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00077000060000600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00077000060000600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00700700066006600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000066666600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000700000070000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
88888888000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
80000008000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
80888808000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
80800808000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
80800808000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
80888808000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
80000008000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
88888888000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000a000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000a8a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00044400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00044400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__gff__
0000000000000000000000000000000001000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__map__
1010101010101010101010101010101000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000
1000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000
1000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000
1000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1000000000200000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1000001010101000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1000001000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1000001000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1000001000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1000001000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1000001000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1000000000000001000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1010101010101010101010101010101000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
